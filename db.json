{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/images/init.jpg","path":"images/init.jpg","modified":0,"renderable":0},{"_id":"source/images/selector.jpg","path":"images/selector.jpg","modified":0,"renderable":0},{"_id":"source/images/prevObject.jpg","path":"images/prevObject.jpg","modified":0,"renderable":0},{"_id":"source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1487836294000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1487836294000},{"_id":"source/robots.txt","hash":"aab04f235067649a3feb20471d363345c757fcf8","modified":1488184838000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1487836294000},{"_id":"source/.DS_Store","hash":"4ff15cfee78f023b4025445506340be896afabb0","modified":1496584285000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1487836294000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1487836294000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1487836294000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1487836294000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1487836294000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1487836294000},{"_id":"themes/next/gulpfile.coffee","hash":"b00e93c5c8667a4fbed71046dc93ce6784bf6257","modified":1487836294000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1487836294000},{"_id":"themes/next/_config.yml","hash":"fb1cb74d7a9919725110158479c28dc5232aa136","modified":1496762410000},{"_id":"themes/next/package.json","hash":"a042faed34835a52505643aa2d841cd2dcf5dff6","modified":1487836294000},{"_id":"source/_posts/.DS_Store","hash":"02f57d9e79fabb31224f18cc58702fb6d64b1ce3","modified":1510037273000},{"_id":"source/_posts/animation.md","hash":"93b361ddf5c0822f9429e7236f3c0dedd932d05e","modified":1510044665000},{"_id":"source/_posts/learnJquery.md","hash":"543697d6808afa6217f2ac2d85e0560fa53988a9","modified":1499060806000},{"_id":"source/_posts/markdown.md","hash":"78da3217aecbbb960e2c735bfc68f45faa605bde","modified":1510049774000},{"_id":"source/categories/index.md","hash":"dac6108db2b0c771eeb736adc2d14fa3ed48dd3e","modified":1488080840000},{"_id":"source/guestbook/index.md","hash":"1ae8520d2f575d4a65a67ee4aad3dd5b811439be","modified":1488174597000},{"_id":"source/images/init.jpg","hash":"111b221f45669c06c0de25cd9497593b4af586e1","modified":1496850462000},{"_id":"source/tags/index.md","hash":"b764765f58d8b971a9c2c0d7fe16801f84201893","modified":1488094528000},{"_id":"source/images/selector.jpg","hash":"23ede6ace4d4f5d115bf16910552ff55eb52eda7","modified":1496584196000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1487836294000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1487836294000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1487836234000},{"_id":"themes/next/.git/index","hash":"3489abbc55c75066a6f579c87a60addb88f8aee4","modified":1487842626000},{"_id":"themes/next/.git/packed-refs","hash":"eefb11b7b589d7c7c7dd2b9298f56c0f6221f0bf","modified":1487836294000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1487836294000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1487836294000},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1487836294000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1487836294000},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1487836294000},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1487836294000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1487836294000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1487836294000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1487836294000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1487836294000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1487836294000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f682cccde6e1e1d856664ed80e152ab0bb1eb369","modified":1488081276000},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1487836294000},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1487836294000},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1487836294000},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1487836294000},{"_id":"themes/next/layout/index.swig","hash":"dda2b503436aed128b6117a948582808eaf3fe52","modified":1488190279000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1487836294000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1487836294000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1487836294000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1487836294000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1487836294000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1487836294000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1487836294000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1487836294000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1487836294000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1487836294000},{"_id":"source/images/prevObject.jpg","hash":"99647c2317f257bdc259e8bf1f618e50edf89bbe","modified":1496934746000},{"_id":"source/images/wechat.jpg","hash":"4d30c3a01b78f434dd155f9a16e47f2abe2471a3","modified":1496762257000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487836294000},{"_id":"source/_posts/animation/.DS_Store","hash":"e7f81d6310eb7b3ec426a42e8587b2ab869a6792","modified":1510042546000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1487836234000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1487836234000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1487836234000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1487836234000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1487836234000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1487836234000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1487836234000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1487836234000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1487836234000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1487836234000},{"_id":"themes/next/.git/logs/HEAD","hash":"158e48f5fc8425907ff7d47231025f0b0a072746","modified":1487836294000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1487836234000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1487836294000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1487836294000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1487836294000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1487836294000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"f65d0dbfbb54d81b42e469539bcbb09eca5657f3","modified":1488188553000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1487836294000},{"_id":"themes/next/layout/_partials/header.swig","hash":"665fee16093356d710f5c257b5e0d8e7416ab797","modified":1487836294000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1487836294000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1487836294000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1487836294000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1487836294000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1487836294000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1487836294000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1487836294000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1487836294000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1487836294000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1487836294000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1487836294000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1487836294000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1487836294000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1487836294000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1487836294000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1487836294000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"2155bc4bbcd2d46ac46d23fad0bec23b782e9ae3","modified":1488189986000},{"_id":"themes/next/layout/_macro/post.swig","hash":"6243bc0778f87186ba78bb6022f40d719565fd19","modified":1487836294000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1487836294000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1487836294000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1487836294000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1487836294000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1487836294000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1487836294000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1487836294000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1487836294000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1487836294000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1487836294000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487836294000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487836294000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1487836294000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1487836294000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1487836294000},{"_id":"source/_posts/animation/devtools-waterfall.jpg","hash":"f9aceb28a68e89b7052d71170cec2eaf478321b6","modified":1510037008000},{"_id":"source/_posts/animation/layout.jpg","hash":"b4a3dfdca34b97079980adcc353f0ada8acfc148","modified":1510037110000},{"_id":"source/_posts/animation/cheap-operations.jpg","hash":"06f51bdcb8e7aca3e5f296b83756ba90a95aac03","modified":1510035544000},{"_id":"source/_posts/learnJquery/jquery.jpg","hash":"9898877237df60fd738809428146d0448734e28e","modified":1496563949000},{"_id":"source/_posts/animation/paint.jpg","hash":"8ba4661ec5fc4a1c89b17d2a80f41614e4d47f32","modified":1510037209000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487836294000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487836294000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487836294000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487836294000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487836294000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487836294000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487836294000},{"_id":"themes/next/.git/refs/heads/master","hash":"731907b26728ab34f6bb818b8f6201d1ada401f8","modified":1487836294000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1487836294000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1487836294000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1487836294000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1487836294000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"741f09b2ba4e440011c15f5d288b109b82c87f1b","modified":1487836294000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1487836294000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1487836294000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1487836294000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1487836294000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1487836294000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1487836294000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1487836294000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"ceb39c100c99900294ddee8b1ff81fcaf43873b5","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1487836294000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1487836294000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1487836294000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1487836294000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1487836294000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3c8dcf93db666ac6f9f8955b5d36a9419430862a","modified":1487836294000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1487836294000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1487836294000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1487836294000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1487836294000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1487836294000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1487836294000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1487836294000},{"_id":"themes/next/source/js/src/post-details.js","hash":"661806a916fa46566accb3222da1fb790decb725","modified":1487836294000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1487836294000},{"_id":"themes/next/source/js/src/utils.js","hash":"86834fb60aad185634f8513b152d472a53d9ca08","modified":1487836294000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1487836294000},{"_id":"themes/next/source/uploads/avatar.png","hash":"56358df2b3c0f90cf26150860df9fe5190b543e0","modified":1487839339000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1487836294000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1487836294000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1487836294000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1487836294000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1487836294000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1487836294000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1487836294000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1487836294000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1487836294000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1487836294000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1487836294000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1487836294000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1487836294000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1487836294000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1487836294000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1487836294000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1487836294000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1487836294000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1487836294000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1487836294000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1487836294000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1487836294000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1487836294000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1487836294000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1487836294000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"158e48f5fc8425907ff7d47231025f0b0a072746","modified":1487836294000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1487836294000},{"_id":"themes/next/.git/objects/60/c5a60554fa16c1a0a890aa9f6c34a51f2fa15a","hash":"ae454d9eba0d00a7b05b7fa171aa61fbe947a337","modified":1487842626000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1487836294000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1487836294000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1487836294000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1487836294000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1487836294000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1487836294000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1487836294000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"7e18f08c2c82f71e83860f232d43d8b89865ac2e","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1487836294000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1487836294000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487836294000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487836294000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487836294000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487836294000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487836294000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487836294000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1487836294000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1487836294000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1487836294000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1487836294000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1487836294000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1487836294000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1487836294000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1487836294000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1487836294000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1487836294000},{"_id":"themes/next/.git/objects/pack/pack-1a01729769d0cf86e01d59653b519cb76253551f.idx","hash":"e7c99245fdb57fd14e05e448e1dd5b4302fc4905","modified":1487836294000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1487836294000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1487836294000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1487836294000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"158e48f5fc8425907ff7d47231025f0b0a072746","modified":1487836294000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1487836294000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1487836294000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1487836294000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1487836294000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1487836294000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1487836294000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1487836294000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1487836294000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1487836294000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1487836294000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1487836294000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1487836294000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1487836294000},{"_id":"themes/next/.git/objects/pack/pack-1a01729769d0cf86e01d59653b519cb76253551f.pack","hash":"5d661ab44f2d2c8b122d522ea9d6a6f55c13b9b4","modified":1487836294000}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2017-02-26T03:47:20.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-02-26 11:47:20\n---\n","updated":"2017-02-26T03:47:20.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj9pgkqeu0001dz3764x21jh5","content":"","excerpt":"","more":""},{"title":"guestbook","date":"2017-02-26T03:53:08.000Z","_content":"<blockquote class=\"blockquote-center\">念念不忘</blockquote>\n<br/>\n>最近访客\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n\n","source":"guestbook/index.md","raw":"---\ntitle: guestbook\ndate: 2017-02-26 11:53:08\n---\n<blockquote class=\"blockquote-center\">念念不忘</blockquote>\n<br/>\n>最近访客\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n\n","updated":"2017-02-27T05:49:57.000Z","path":"guestbook/index.html","comments":1,"layout":"page","_id":"cj9pgkqey0003dz37tmhnayya","content":"<p><blockquote class=\"blockquote-center\">念念不忘</blockquote><br><br></p>\n<blockquote>\n<p>最近访客</p>\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n\n</blockquote>\n","excerpt":"","more":"<p><blockquote class=\"blockquote-center\">念念不忘</blockquote><br><br/></p>\n<blockquote>\n<p>最近访客</p>\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n\n</blockquote>\n"},{"title":"tags","date":"2017-02-26T07:35:27.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-02-26 15:35:27\n---\n","updated":"2017-02-26T07:35:28.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj9pgkqf10005dz3737jrx59m","content":"","excerpt":"","more":""}],"Post":[{"title":"animation","date":"2017-11-07T06:11:58.000Z","_content":"# CSS3/animation\n\n## 1. WHAT?\n![img](http://www.ceerqingting.com/2017/11/07/animation/cheap-operations.jpg)\n\n## 2. Why?\n*From DOM to Pixels in DevTools, the process that the browser goes through:*\n\n### a.Recalculate Style\ncalculate the styles that apply to the elements\n \n### b.Layout\ngenerate the geometry(position and size) and position for each element\n\n### c.Paint Setup and Paint\nfill out the pixels for each element into layers\nComposite Layers\n\n### d.draw thie layers out to screen\n\n![img](http://www.ceerqingting.com/2017/11/07/animation/devtools-waterfall.jpg)\n\n**To achieve silky smooth animations you need to avoid work, and the best way to do that is to only change properties that affect compositing -- transform and opacity.**\n\nThe higherup you start on thie timeline waterfall the more work the browser has to do to get pixels on to the screen.\n\n# 3.Conclusion\n\n### a.style affect layout\n\n| Tables        | attribute  |\n|:-------------:| -----:|\n| width\t        | height |\n| padding\t      | margin |\n| display\t      | border-width |\n| border\t      | top |      \n| position\t    | font-size |\n| float\t        | text-align |\n| overflow-y\t  | font-weight |\n| overflow\t    | left |\n| font-family\t  | line-height |\n| vertical-align| right |\n| clear\t        | white-space |\n| bottom\t      | min-height |\n\n\n### b.style affect paint\n| Tables        | attribute  |\n| :-------------: | -----:|\n| color\t        | border-style |\n| visibility | background |\n| text-decoration\t| background-image |\n| background-position\t| background-repeat |\n| outline-color\t| outline |\n| outline-style\t| border-radius |\n| outline-width\t| box-shadow |\n| background-size\t|","source":"_posts/animation.md","raw":"---\ntitle: animation\ndate: 2017-11-07 14:11:58\ntags:\n---\n# CSS3/animation\n\n## 1. WHAT?\n![img](http://www.ceerqingting.com/2017/11/07/animation/cheap-operations.jpg)\n\n## 2. Why?\n*From DOM to Pixels in DevTools, the process that the browser goes through:*\n\n### a.Recalculate Style\ncalculate the styles that apply to the elements\n \n### b.Layout\ngenerate the geometry(position and size) and position for each element\n\n### c.Paint Setup and Paint\nfill out the pixels for each element into layers\nComposite Layers\n\n### d.draw thie layers out to screen\n\n![img](http://www.ceerqingting.com/2017/11/07/animation/devtools-waterfall.jpg)\n\n**To achieve silky smooth animations you need to avoid work, and the best way to do that is to only change properties that affect compositing -- transform and opacity.**\n\nThe higherup you start on thie timeline waterfall the more work the browser has to do to get pixels on to the screen.\n\n# 3.Conclusion\n\n### a.style affect layout\n\n| Tables        | attribute  |\n|:-------------:| -----:|\n| width\t        | height |\n| padding\t      | margin |\n| display\t      | border-width |\n| border\t      | top |      \n| position\t    | font-size |\n| float\t        | text-align |\n| overflow-y\t  | font-weight |\n| overflow\t    | left |\n| font-family\t  | line-height |\n| vertical-align| right |\n| clear\t        | white-space |\n| bottom\t      | min-height |\n\n\n### b.style affect paint\n| Tables        | attribute  |\n| :-------------: | -----:|\n| color\t        | border-style |\n| visibility | background |\n| text-decoration\t| background-image |\n| background-position\t| background-repeat |\n| outline-color\t| outline |\n| outline-style\t| border-radius |\n| outline-width\t| box-shadow |\n| background-size\t|","slug":"animation","published":1,"updated":"2017-11-07T08:51:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9pgkqeo0000dz37xwxzso0q","content":"<h1 id=\"CSS3-animation\"><a href=\"#CSS3-animation\" class=\"headerlink\" title=\"CSS3/animation\"></a>CSS3/animation</h1><h2 id=\"1-WHAT\"><a href=\"#1-WHAT\" class=\"headerlink\" title=\"1. WHAT?\"></a>1. WHAT?</h2><p><img src=\"http://www.ceerqingting.com/2017/11/07/animation/cheap-operations.jpg\" alt=\"img\"></p>\n<h2 id=\"2-Why\"><a href=\"#2-Why\" class=\"headerlink\" title=\"2. Why?\"></a>2. Why?</h2><p><em>From DOM to Pixels in DevTools, the process that the browser goes through:</em></p>\n<h3 id=\"a-Recalculate-Style\"><a href=\"#a-Recalculate-Style\" class=\"headerlink\" title=\"a.Recalculate Style\"></a>a.Recalculate Style</h3><p>calculate the styles that apply to the elements</p>\n<h3 id=\"b-Layout\"><a href=\"#b-Layout\" class=\"headerlink\" title=\"b.Layout\"></a>b.Layout</h3><p>generate the geometry(position and size) and position for each element</p>\n<h3 id=\"c-Paint-Setup-and-Paint\"><a href=\"#c-Paint-Setup-and-Paint\" class=\"headerlink\" title=\"c.Paint Setup and Paint\"></a>c.Paint Setup and Paint</h3><p>fill out the pixels for each element into layers<br>Composite Layers</p>\n<h3 id=\"d-draw-thie-layers-out-to-screen\"><a href=\"#d-draw-thie-layers-out-to-screen\" class=\"headerlink\" title=\"d.draw thie layers out to screen\"></a>d.draw thie layers out to screen</h3><p><img src=\"http://www.ceerqingting.com/2017/11/07/animation/devtools-waterfall.jpg\" alt=\"img\"></p>\n<p><strong>To achieve silky smooth animations you need to avoid work, and the best way to do that is to only change properties that affect compositing – transform and opacity.</strong></p>\n<p>The higherup you start on thie timeline waterfall the more work the browser has to do to get pixels on to the screen.</p>\n<h1 id=\"3-Conclusion\"><a href=\"#3-Conclusion\" class=\"headerlink\" title=\"3.Conclusion\"></a>3.Conclusion</h1><h3 id=\"a-style-affect-layout\"><a href=\"#a-style-affect-layout\" class=\"headerlink\" title=\"a.style affect layout\"></a>a.style affect layout</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Tables</th>\n<th style=\"text-align:right\">attribute</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">width</td>\n<td style=\"text-align:right\">height</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">padding</td>\n<td style=\"text-align:right\">margin</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">display</td>\n<td style=\"text-align:right\">border-width</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">border</td>\n<td style=\"text-align:right\">top</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">position</td>\n<td style=\"text-align:right\">font-size</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:right\">text-align</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">overflow-y</td>\n<td style=\"text-align:right\">font-weight</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">overflow</td>\n<td style=\"text-align:right\">left</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">font-family</td>\n<td style=\"text-align:right\">line-height</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">vertical-align</td>\n<td style=\"text-align:right\">right</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">clear</td>\n<td style=\"text-align:right\">white-space</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bottom</td>\n<td style=\"text-align:right\">min-height</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"b-style-affect-paint\"><a href=\"#b-style-affect-paint\" class=\"headerlink\" title=\"b.style affect paint\"></a>b.style affect paint</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Tables</th>\n<th style=\"text-align:right\">attribute</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">color</td>\n<td style=\"text-align:right\">border-style</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">visibility</td>\n<td style=\"text-align:right\">background</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">text-decoration</td>\n<td style=\"text-align:right\">background-image</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">background-position</td>\n<td style=\"text-align:right\">background-repeat</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">outline-color</td>\n<td style=\"text-align:right\">outline</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">outline-style</td>\n<td style=\"text-align:right\">border-radius</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">outline-width</td>\n<td style=\"text-align:right\">box-shadow</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">background-size</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h1 id=\"CSS3-animation\"><a href=\"#CSS3-animation\" class=\"headerlink\" title=\"CSS3/animation\"></a>CSS3/animation</h1><h2 id=\"1-WHAT\"><a href=\"#1-WHAT\" class=\"headerlink\" title=\"1. WHAT?\"></a>1. WHAT?</h2><p><img src=\"http://www.ceerqingting.com/2017/11/07/animation/cheap-operations.jpg\" alt=\"img\"></p>\n<h2 id=\"2-Why\"><a href=\"#2-Why\" class=\"headerlink\" title=\"2. Why?\"></a>2. Why?</h2><p><em>From DOM to Pixels in DevTools, the process that the browser goes through:</em></p>\n<h3 id=\"a-Recalculate-Style\"><a href=\"#a-Recalculate-Style\" class=\"headerlink\" title=\"a.Recalculate Style\"></a>a.Recalculate Style</h3><p>calculate the styles that apply to the elements</p>\n<h3 id=\"b-Layout\"><a href=\"#b-Layout\" class=\"headerlink\" title=\"b.Layout\"></a>b.Layout</h3><p>generate the geometry(position and size) and position for each element</p>\n<h3 id=\"c-Paint-Setup-and-Paint\"><a href=\"#c-Paint-Setup-and-Paint\" class=\"headerlink\" title=\"c.Paint Setup and Paint\"></a>c.Paint Setup and Paint</h3><p>fill out the pixels for each element into layers<br>Composite Layers</p>\n<h3 id=\"d-draw-thie-layers-out-to-screen\"><a href=\"#d-draw-thie-layers-out-to-screen\" class=\"headerlink\" title=\"d.draw thie layers out to screen\"></a>d.draw thie layers out to screen</h3><p><img src=\"http://www.ceerqingting.com/2017/11/07/animation/devtools-waterfall.jpg\" alt=\"img\"></p>\n<p><strong>To achieve silky smooth animations you need to avoid work, and the best way to do that is to only change properties that affect compositing – transform and opacity.</strong></p>\n<p>The higherup you start on thie timeline waterfall the more work the browser has to do to get pixels on to the screen.</p>\n<h1 id=\"3-Conclusion\"><a href=\"#3-Conclusion\" class=\"headerlink\" title=\"3.Conclusion\"></a>3.Conclusion</h1><h3 id=\"a-style-affect-layout\"><a href=\"#a-style-affect-layout\" class=\"headerlink\" title=\"a.style affect layout\"></a>a.style affect layout</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Tables</th>\n<th style=\"text-align:right\">attribute</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">width</td>\n<td style=\"text-align:right\">height</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">padding</td>\n<td style=\"text-align:right\">margin</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">display</td>\n<td style=\"text-align:right\">border-width</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">border</td>\n<td style=\"text-align:right\">top</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">position</td>\n<td style=\"text-align:right\">font-size</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:right\">text-align</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">overflow-y</td>\n<td style=\"text-align:right\">font-weight</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">overflow</td>\n<td style=\"text-align:right\">left</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">font-family</td>\n<td style=\"text-align:right\">line-height</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">vertical-align</td>\n<td style=\"text-align:right\">right</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">clear</td>\n<td style=\"text-align:right\">white-space</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bottom</td>\n<td style=\"text-align:right\">min-height</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"b-style-affect-paint\"><a href=\"#b-style-affect-paint\" class=\"headerlink\" title=\"b.style affect paint\"></a>b.style affect paint</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Tables</th>\n<th style=\"text-align:right\">attribute</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">color</td>\n<td style=\"text-align:right\">border-style</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">visibility</td>\n<td style=\"text-align:right\">background</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">text-decoration</td>\n<td style=\"text-align:right\">background-image</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">background-position</td>\n<td style=\"text-align:right\">background-repeat</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">outline-color</td>\n<td style=\"text-align:right\">outline</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">outline-style</td>\n<td style=\"text-align:right\">border-radius</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">outline-width</td>\n<td style=\"text-align:right\">box-shadow</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">background-size</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"markdown","date":"2017-11-07T08:51:57.000Z","_content":"# 1.标题\n```javascript\n  # 一级标题\n  ## 二级标题\n  ### 三级标题\n  #### 四级标题\n  ##### 五级标题\n  ###### 六级标题\n```\n*注：# 和 【一级标题】之间保留一个空格*\n\n# 2.列表\n``` javascript\n  （1） 无序列表\n  - 文本1\n  - 文本2\n  - 文本3\n  （2） 有序列表\n  1. 文本1\n  2. 文本2\n  3. 文本3\n```\n*注：- 、 1.和文本之间保留一个空格*\n\n# 3.链接和图片\n```javascript\n  [简书](http://www.jianshu.com)\n  ![img](http://www.jianshu.com)\n```\n# 4.引用\n```javascript\n  > 好好学习，天天向上\n```\n*注： > 和 文本之间保留一个字符的空格*\n\n# 5.粗体和斜体\n```javascript\n  *这个是斜体*\n  **这个是粗体**\n```\n# 6.代码引用\n```javascript\n  ` 单段代码引用 `\n```\n\n  ```\n  多段代码引用\n  多段代码引用\n  多段代码引用\n  ```\n\n# 7.表格\n```javascript\n\n  | Tables      | Are        | Cool    |\n  | ------------| :----------: | -----:|\n  | 文字靠左     | 文字居中    | 文字靠右  |\n  | col 3 is    | ll         | sdflk   |\n  | col 3 is    | ll         | sdflk   |\n\n  dog | bird | cat\n  --- | ---- | ---\n  foo | 文字 | 靠左\n  foo | foo | foo\n  foo | foo | foo\n```\n","source":"_posts/markdown.md","raw":"---\ntitle: markdown\ndate: 2017-11-07 16:51:57\ntags:\n---\n# 1.标题\n```javascript\n  # 一级标题\n  ## 二级标题\n  ### 三级标题\n  #### 四级标题\n  ##### 五级标题\n  ###### 六级标题\n```\n*注：# 和 【一级标题】之间保留一个空格*\n\n# 2.列表\n``` javascript\n  （1） 无序列表\n  - 文本1\n  - 文本2\n  - 文本3\n  （2） 有序列表\n  1. 文本1\n  2. 文本2\n  3. 文本3\n```\n*注：- 、 1.和文本之间保留一个空格*\n\n# 3.链接和图片\n```javascript\n  [简书](http://www.jianshu.com)\n  ![img](http://www.jianshu.com)\n```\n# 4.引用\n```javascript\n  > 好好学习，天天向上\n```\n*注： > 和 文本之间保留一个字符的空格*\n\n# 5.粗体和斜体\n```javascript\n  *这个是斜体*\n  **这个是粗体**\n```\n# 6.代码引用\n```javascript\n  ` 单段代码引用 `\n```\n\n  ```\n  多段代码引用\n  多段代码引用\n  多段代码引用\n  ```\n\n# 7.表格\n```javascript\n\n  | Tables      | Are        | Cool    |\n  | ------------| :----------: | -----:|\n  | 文字靠左     | 文字居中    | 文字靠右  |\n  | col 3 is    | ll         | sdflk   |\n  | col 3 is    | ll         | sdflk   |\n\n  dog | bird | cat\n  --- | ---- | ---\n  foo | 文字 | 靠左\n  foo | foo | foo\n  foo | foo | foo\n```\n","slug":"markdown","published":1,"updated":"2017-11-07T10:16:50.000Z","_id":"cj9pgkqew0002dz37vz98qbpf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-标题\"><a href=\"#1-标题\" class=\"headerlink\" title=\"1.标题\"></a>1.标题</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 一级标题</div><div class=\"line\">## 二级标题</div><div class=\"line\">### 三级标题</div><div class=\"line\">#### 四级标题</div><div class=\"line\">##### 五级标题</div><div class=\"line\">###### 六级标题</div></pre></td></tr></table></figure>\n<p><em>注：# 和 【一级标题】之间保留一个空格</em></p>\n<h1 id=\"2-列表\"><a href=\"#2-列表\" class=\"headerlink\" title=\"2.列表\"></a>2.列表</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">（<span class=\"number\">1</span>） 无序列表</div><div class=\"line\">- 文本<span class=\"number\">1</span></div><div class=\"line\">- 文本<span class=\"number\">2</span></div><div class=\"line\">- 文本<span class=\"number\">3</span></div><div class=\"line\">（<span class=\"number\">2</span>） 有序列表</div><div class=\"line\"><span class=\"number\">1.</span> 文本<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2.</span> 文本<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3.</span> 文本<span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p><em>注：- 、 1.和文本之间保留一个空格</em></p>\n<h1 id=\"3-链接和图片\"><a href=\"#3-链接和图片\" class=\"headerlink\" title=\"3.链接和图片\"></a>3.链接和图片</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[简书](http:<span class=\"comment\">//www.jianshu.com)</span></div><div class=\"line\">![img](http:<span class=\"comment\">//www.jianshu.com)</span></div></pre></td></tr></table></figure>\n<h1 id=\"4-引用\"><a href=\"#4-引用\" class=\"headerlink\" title=\"4.引用\"></a>4.引用</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 好好学习，天天向上</div></pre></td></tr></table></figure>\n<p><em>注： &gt; 和 文本之间保留一个字符的空格</em></p>\n<h1 id=\"5-粗体和斜体\"><a href=\"#5-粗体和斜体\" class=\"headerlink\" title=\"5.粗体和斜体\"></a>5.粗体和斜体</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">*这个是斜体*</div><div class=\"line\">**这个是粗体**</div></pre></td></tr></table></figure>\n<h1 id=\"6-代码引用\"><a href=\"#6-代码引用\" class=\"headerlink\" title=\"6.代码引用\"></a>6.代码引用</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">` 单段代码引用 `</span></div></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">多段代码引用</div><div class=\"line\">多段代码引用</div><div class=\"line\">多段代码引用</div></pre></td></tr></table></figure>\n<h1 id=\"7-表格\"><a href=\"#7-表格\" class=\"headerlink\" title=\"7.表格\"></a>7.表格</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">| Tables      | Are        | Cool    |</div><div class=\"line\">| ------------| :----------: | -----:|</div><div class=\"line\">| 文字靠左     | 文字居中    | 文字靠右  |</div><div class=\"line\">| col <span class=\"number\">3</span> is    | ll         | sdflk   |</div><div class=\"line\">| col <span class=\"number\">3</span> is    | ll         | sdflk   |</div><div class=\"line\"></div><div class=\"line\">dog | bird | cat</div><div class=\"line\">--- | ---- | ---</div><div class=\"line\">foo | 文字 | 靠左</div><div class=\"line\">foo | foo | foo</div><div class=\"line\">foo | foo | foo</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"1-标题\"><a href=\"#1-标题\" class=\"headerlink\" title=\"1.标题\"></a>1.标题</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 一级标题</div><div class=\"line\">## 二级标题</div><div class=\"line\">### 三级标题</div><div class=\"line\">#### 四级标题</div><div class=\"line\">##### 五级标题</div><div class=\"line\">###### 六级标题</div></pre></td></tr></table></figure>\n<p><em>注：# 和 【一级标题】之间保留一个空格</em></p>\n<h1 id=\"2-列表\"><a href=\"#2-列表\" class=\"headerlink\" title=\"2.列表\"></a>2.列表</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">（<span class=\"number\">1</span>） 无序列表</div><div class=\"line\">- 文本<span class=\"number\">1</span></div><div class=\"line\">- 文本<span class=\"number\">2</span></div><div class=\"line\">- 文本<span class=\"number\">3</span></div><div class=\"line\">（<span class=\"number\">2</span>） 有序列表</div><div class=\"line\"><span class=\"number\">1.</span> 文本<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2.</span> 文本<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3.</span> 文本<span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p><em>注：- 、 1.和文本之间保留一个空格</em></p>\n<h1 id=\"3-链接和图片\"><a href=\"#3-链接和图片\" class=\"headerlink\" title=\"3.链接和图片\"></a>3.链接和图片</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[简书](http:<span class=\"comment\">//www.jianshu.com)</span></div><div class=\"line\">![img](http:<span class=\"comment\">//www.jianshu.com)</span></div></pre></td></tr></table></figure>\n<h1 id=\"4-引用\"><a href=\"#4-引用\" class=\"headerlink\" title=\"4.引用\"></a>4.引用</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 好好学习，天天向上</div></pre></td></tr></table></figure>\n<p><em>注： &gt; 和 文本之间保留一个字符的空格</em></p>\n<h1 id=\"5-粗体和斜体\"><a href=\"#5-粗体和斜体\" class=\"headerlink\" title=\"5.粗体和斜体\"></a>5.粗体和斜体</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">*这个是斜体*</div><div class=\"line\">**这个是粗体**</div></pre></td></tr></table></figure>\n<h1 id=\"6-代码引用\"><a href=\"#6-代码引用\" class=\"headerlink\" title=\"6.代码引用\"></a>6.代码引用</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">` 单段代码引用 `</span></div></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">多段代码引用</div><div class=\"line\">多段代码引用</div><div class=\"line\">多段代码引用</div></pre></td></tr></table></figure>\n<h1 id=\"7-表格\"><a href=\"#7-表格\" class=\"headerlink\" title=\"7.表格\"></a>7.表格</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">| Tables      | Are        | Cool    |</div><div class=\"line\">| ------------| :----------: | -----:|</div><div class=\"line\">| 文字靠左     | 文字居中    | 文字靠右  |</div><div class=\"line\">| col <span class=\"number\">3</span> is    | ll         | sdflk   |</div><div class=\"line\">| col <span class=\"number\">3</span> is    | ll         | sdflk   |</div><div class=\"line\"></div><div class=\"line\">dog | bird | cat</div><div class=\"line\">--- | ---- | ---</div><div class=\"line\">foo | 文字 | 靠左</div><div class=\"line\">foo | foo | foo</div><div class=\"line\">foo | foo | foo</div></pre></td></tr></table></figure>\n"},{"title":"learnJquery","date":"2017-06-04T07:58:36.000Z","_content":"# 1. jQuery整体架构\n![img](http://www.ceerqingting.com/2017/06/04/learnJquery/jquery.jpg)\n```javascript\n    //函数自执行\n    (function(global, factory) {\n       factory(global);\n          }(typeof window !== \"undefined\" ? window : this, function(window, noGlobal) {\n              var jQuery = function( selector, context ) {\n              return new jQuery.fn.init( selector, context );\n            };\n            jQuery.fn = jQuery.prototype = {};\n            // 核心方法\n            // 回调系统\n            // 异步队列\n            // 数据缓存\n            // 队列操作\n            // 选择器引\n            // 属性操作\n            // 节点遍历\n            // 文档处理\n            // 样式操作\n            // 属性操作\n            // 事件体系\n            // AJAX交互\n            // 动画引擎\n            return jQuery;\n     }));\n```\n\n## 1. 五大块\n- 选择器\n- DOM操作\n- 事件\n- AJAX\n- 动画\n\n## 2. 示例\n- 接口：\n```javascript\n      .ajaxComplete()\n      .ajaxError()\n      .ajaxSend()\n      .ajaxStart()\n      .ajaxStop()\n      .ajaxSuccess()\n```\n- 底层接口：\n```javascript\n    jQuery.ajax()\n    jQuery.ajaxSetup()\n```\n- 快捷方法：<br>\n```javascript\n    jQuery.get()\n    jQuery.getJSON()\n    jQuery.getScript()\n    jQuery.post()\n```\n## 3. jQuery接口设计原理\n```javascript\n    jQuery.each([\"get\", \"post\"]), function(i, method){\n      jQuery[ method ] = function( url, data, callback, type) {\n        //Shift arguments if data argument was omitted\n        if( jQuery.isFunction( data )){\n          type = type || callback;\n          callback = dta;\n          data = undefined;\n        }\n        return jQuery.ajax({\n          url: url,\n          type: method,\n          data: data,\n          success: callback\n        })\n      }\n    }\n```\n\n# 2. 立即调用表达式\n> \b解决命名空间与变量污染的问题  \n参考：[立即调用的函数表达式](http://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html)  \n\n## 1. 写法\n```javascript\n//写法一：\n  (function(window, factory){\n    factory(window)\n  }(this, function(){\n    return function(){\n      //jQuery的调用\n    }\n  }))\n//写法二：\n  var factory = function(){\n    return function(){\n      //执行方法\n    }\n  }\n  var jQuery = factory();\n//写法三：\n  (function(window, undefined){\n    var jQuery = function(){}\n    //....\n    window.jQuery = window.$ = jQuery;\n  })(window);\n```\n## 2. 写法优势\n  - window和undefined都是为了减少变量查找所经过的scope作用域。当window通过传递给闭包内部之后，在闭包内部使用它的时候，可以把它当成一个局部变量，显然比原先在window scope下查找的时候要快一些。\n\n  - undefined也是同样道理，其实这个undefined并不是JavaScript数据类型的undefined，而是\b一个普普通通的变量名。只是因为没给它传递值，他的值就是undefined, undefined并不是JavaScript的保留字。  \n   \n## 3. 为什么要传递undefined  \n```javascript\n//Applications Javscript中的undefined并不是作为关键字 因此可以允许用户对其赋值  \n var undefined = \"a\";\n (function(window){\n   alert(undefined); //IE8 \"a\"\n })(window)\n```\n## 4. 为什么要创建一个外层包裹\n```javascript\n  1、匿名函数与自执行\n    function(){\n      //代码逻辑\n    }\n   //上面这种写法是错了，声明了它但是又不给名字又没有使用，所以在语法上错误的，那么怎么去执行一个匿名的函数呢？\n   //要调用一个函数，我们必须要有方法定位它、引用它。所以，我们要取一个名字：\n   var jQuery = function(){\n     //代码逻辑\n   }\n   //jQuery使用()将匿名函数括起来，然后后面再加一对小括号（包含参数列表），那么这小括号能把我们的表达式组合分块，并且每一块（也就是每一对小括号），都有一个返回值。这个返回值实际上也就是小括号中表达式的返回值。所以，当我们用一对小括号把匿名函数括起来的时候，实际上小括号返回的，就是一个匿名函数的Function对象。因此，小括号对加上匿名函数就如同有名字的函数般被我们取得它的引用位置了。所以如果在这个引用变量后面再加上参数列表，就会实现普通函数的调用形式。\n\n2、jQuery在不同平台的下的加载逻辑\n // AMD 和 CommonJS 的支持代码\n  if(typeof module === \"object\" && typeof module.export === \"object\"){\n    module.exports = global.document ? factory(global, true): function(w){\n      if(!w.document){\n        throw new Error(\"jQuery requires a window with a document\");\n      }\n      return factory(w);\n    }\n  }else{\n    factory(global);\n  }\n```\n## 5. 总结\n> 全局变量是魔鬼, 匿名函数可以有效的保证在页面上写入JavaScript，而不会造成全局变量的污染，通过小括号，让其加载的时候立即初始化，这样就形成了一个单例模式的效果从而只会执行一次。\n\n# 3. jQuery的类数组对象结构\n## 1. 为什么是类数组对象呢？  \n```javascript\n//9种方法重载\n  1.jQuery([selector, [context]])\n  2.jQuery(element)\n  3.jQuery(elementArray)\n  4.jQUery(object)\n  5.jQuery(jQuery object)\n  6.jQuery(html, [ownerDocument])\n  7.jQuery(html, [attributes])\n  8.jQuery()\n  9.jQuery(callback)\n```\n>9种方法整体可以分三大块： 选择器、dom的处理、dom加载\n换句话说jQuery就是为了获取DOM、操作DOM而存在的，所以为了更方便这些操作，让节点\b与实例对象通过一个桥梁给关联起来，jQuery内部就采用了一种叫“类数组对象”的方法作为存储接口，所以我们既可以像对象一样处理jQuery操作，也能像数组一样可以使用push、pop、shift、unshift、sort、each、map等类数组的方法操作jQuery对象了  \n\n## 2. jQuery对象可用数组下标索引是什么原理?  \n\b通过$(\".Class\")构建的对象结构如下：  \n![img](/images/selector.jpg)  \n```javascript\n  var aQuery = function(selector){\n      if(!(this instanceof aQuery)){\n        return new aQuery(selector);\n      }\n      var elem = document.getElementById(/[^#].*/.exec(selector)[0]);\n      this.length = 1;\n      this[0] = elem;\n      this.context = document;\n      this.selector = selector;\n      this.get = function(num){\n        return this[num];\n      }\n      return this;\n    }\n```\n>通过对象键值对的关系保存属性， 原型保存方法, 以上为模拟jQuery的对象结构  \n\n## 3. jQuery的无new构建原理\n>函数aQuery()内部首先保证了必须是通过new操作符构建。这样就能保证当前构建的是一个带有this的实例对象，既然是对象我们可以把所有的属性与方法作为对象的key与value的方式给映射到this上，所以如上结构就可以模拟出jQuery这样的操作了，即可通过索引取值，页也可以链式方法取值，但是缺陷是每次调用ajQuery方法等于是创建了一个新的实例，那么类似get方法就要在每一个实例上重新创建一遍，性能大打折扣，所以jQuery在结构上的优化不仅仅只是我们看到的，除了实现类数组结构、方法的原型共享，而且还实现方法的静态与实例的共存\n\n# 4. jQuery中的ready与load事件\n## 1. jQuery3种针对文档加载\b的方法\n```javascript\n$(document).ready(function(){\n  //...代码...\n})\n//document ready简写\n$(function(){\n   //...代码...\n})\n$(document).load(function(){\n   //...代码...\n})\n```\n## 2. ready和load区别\n>DOM文档加载步骤\n1. 解析HTML结构\n2. 加载外部脚本和样式表文件\n3. 解析并执行脚本代码\n4. 构造HTML DOM模型。//ready\n5. 加载图片等外部文件\n6. 页面加载完毕 //load\n```javascript\n  //jQuery处理文档加载时机\n  jQuery.ready.promise = function( obj ){\n    if(!readyList){\n      readyList = jQuery.Deferred();\n      if(document.readyState === 'complete'){\n        //Handle it asynchronously to allow scripts the opportunity to delay ready\n        setTimeot(jQuery.ready);\n      }else{\n        document.addEventListener(\"DOMContentLoaded\",completed, false);\n        window.addEventListner(\"load\", completed, false)\n      }\n    }\n    return readyList.promise(obj);\n  }\n```\n# 5. jQuery多库共存处理\n## 1. 使用DEMO\n```javascript\n  jQuery.noConflict();\n  //使用jQuery\n  jQuery(\"aaron\").show();\n  //使用其他库的$()\n  $(\"aa\").style.display = \"block\";\n  //这个函数必须在导入jQuery文件之后，并且在导入另一个导致冲突的库之前使用\n```\n## 2. 原理\n```javascript\n  var _jQuery = window.jQuery, _$ = window.$;\n  jQuery.noConflict = function(deep){\n    if(window.$ === jQuery){\n      window.$ = _$;\n    }\n    if(deep && window.jQuery === jQuery){\n      window.jQuery = _jQuery;\n    }\n    return jQuery;\n  }\n```\n# 6. 对象的构建\n```javascript\n//类一\n  function ajQuery(){\n    this.name = 'jQuery';\n    this.sayName = function(){\n      return this.name;\n    }\n  }\n  var a = new ajQuery();\n  var b = new ajQuery();\n  var c = new ajQuery();\n\n//类二\n function ajQuery(){\n   this.name = 'jQuery';\n }  \n ajQuery.prototype = {\n   sayName: function(){\n     return this.name\n   }\n }\n var a  = new ajQuery();\n var b  = new ajQuery();\n var c  = new ajQuery();\n```\n类一与类二产生的结构几乎是一样的，本质区别是：  \n类二new产生的a、b、c三个实例对象共享了原型的sayName方法，节省了内存空间，类一则是要为每一个实例复制sayName方法，每个\b方法属性都占用一定空间，类二则是要通过scope连接到原型链查找，无形之中要多一层作用域的查找\n```javascript\n  //jQUery对象的构建\n  jQuery = function(selector, context){\n    return new jQuery.fn.init(selector, context);\n  }\n  jQuery.fn = jQuery.prototype = {\n    init: function(){\n      return this\n    },\n    jquery: version,\n    constructor: jQuery,\n    ....\n  }\n  var a = $();\n```\najQuery与jQuery结构不同点：\n1. 没有采用new操作符\n2. return返回的是一个通过new出来的对象\n\n# 7. 分离构造器\n## 1. 通过new操作符构建一个对象：\n   - 创建一个新对象\n   - 将构造函数的作用域赋给新对象（所以this就指向了这个新对象）\n   - 执行构造函数中的代码\n   - 返回这个新对象  \n```javascript\n  //常见类式写法\n  var $$ = ajQuery = function(selector){\n    this.selector = selector;\n    return this;\n  }\n  ajQuery.fn = ajQuery.prototype = {\n    selectorName: function(){\n      return this.selector;\n    },\n    construction: ajQuery\n  }\n  var a = new $$('aaa');\n  a.selectorName();//aaa\n```\n改造jQuery无new格式\n```javascript\n  var $$ = ajQuery = function(selector){\n    if(!(this instanceof ajQuery)){\n      return new ajQuery(selector);\n    }\n    this.selector = selector;\n    return this\n  }\n```\n错误写法：\n```javascript\n   var $$ = ajQuery = function(selecotr){\n     this.selector = selector;\n     return new ajQuery(selector);\n   }\n   //Uncaught RangeError: Maximum call stact size exceeded\n```\njQuery为了避免出现这种死循环，采取的方法为把原型上的一个init方法作为构造器\n```javascript\n  var $$ = ajQuery = function(selector){\n    //把原型上的init作为构造器\n    return new ajQuery.fn.init(selector);\n  }\n  ajQuery.fn = ajQuery.prototype = {\n    name: 'aaron',\n    init: function(){\n      console.log(this);\n    },\n    constructor: ajQuery\n  }\n```\n问题：init是ajQuery原型上作为构造器的一个方法，那么this就不是ajQuery了，所以this就完全引用不到ajQuery的原型了，这里通过new把init方法与ajQuery给分离成2个独立的构造器\n\n# 8. 静态与实例方法共享设计\n## 1. 遍历方法\n```javascript\n  $('.aaron').each() //作为实例方法存在\n  $.each() //作为静态方法存在\n```\n第一条语句是给有指定的上下文调用的，就是$('.aaron')获取的DOM合集，第二条语句$.each()函数可用于迭代任何集合，无论是“名/值”对象或者数组。在迭代数组的情况下，回调函数每次都会传递一个数组索引和相应的数组值作为参数，那是不是要写两个方法\n```javascript\n  //jQuery源码\n  jQuery.prototype = {\n    each: function(callback, args){\n      return jQuery.each(this, callback, args);\n    }\n  }\n```\n## 2. 共享方法\n> jQuery通过new原型prototype上的init方法当做构造器，那么init的原型链方法就是实例的方法，所以jQuery通过2个构造器划分2种不同的调用方式，一种是静态，一种是原型，方法是共享的\n```javascript\n//jQuery方案\n  ajQuery.fn = ajQuery.prototype = {\n    name: 'aaron',\n    init: function(selector){\n      this.selector = selector;\n      return this;\n    },\n    constructor: ajQuery\n  }\n  ajQuery.fn.init.prototype = ajQuery.fn;\n```\n![img](/images/init.jpg)  \n通过原型传递解决问题，把jQuery的原型传递给jQuery.prototype.init.prototype,因为是引用传递所以不需要担心循环引用性能的问题\n# 9. 方法链式调用的实现 \n## 1. DSL\n> Domain Specific Language: 用于描述和解决特定领域问题的语言\n```javascript\n $('input[type=\"button\"]').eq(0).click(function(){\n    alert('点击我！')\n}).end().eq(1).click(function(){\n    $('input[type=\"button\"]:eq(0)').trigger('click');\n}).end().eq(2).toggle(function(){\n    console.log('toggle')\n})\n```\n这种管道风格的DSL链式代码：\n- 节约JS代码\n- 所返回的都是同一个对象，提高代码效率\n## 2. return this\n```javascript\n   var $$ = ajQuery = function(selector){\n      return new ajQuery.fn.init(selector);\n    }\n    ajQuery.fn = ajQuery.prototype = {\n      name: 'aaron',\n      init: function(selector){\n        this.selector = selector;\n        return this;\n      },\n      constructor: ajQuery\n    }\n    ajQuery.fn.init.prototype = ajQuery.fn;\n    ajQuery.fn.setName = function(myName){\n      this.myName = myName;\n      return this;\n    }\n    ajQuery.fn.getName = function(){\n      $('#aaron').html(this.myName);\n      return this;\n    }\n    $$().setName('jiangfen').getName();\n```\n如果需要链式处理，只需要在方法内部返回当前这个实例对象的this就可以了，因为返回当前实例的this,从而可以访问自己的原型。这样处理只是\b同步链式，除了同步链式还有异步链式。\n\n# 10. 插件接口的设计\n## 1. jQuery插件开发分为两种\n- 挂在jQuery命名空间下的全局函数，也可称为静态方法\n- 挂在jQuery原型下的方法，这样通过选择器的jQuery对象实例也能共享该方法。\n\n```javascript\n  //提供的接口\n  $.extend(target, [object1], [objectN])\n  //接口的使用： \n  jQuery.extend({\n    data: function(){},\n    removeData: function(){}\n  })\n\n  jQuery.fn.extend({\n    data: function(){},\n    removeData: function(){}\n  })\n```\n## 2. jQuery实现方法  \n- jQuery支持自己扩展属性，jQuery.extend和jQuery.fn.extend其实是同指向同一方法的不同引用\n- \bjQuery.extend调用的\b时候上下文指向的是jQuery构造器\n- jQuery.fn.extend调用的时候上下文指向的是jQuery构造器的实例对象\n```javascript\n   var  $$ = ajQuery = function(selector){\n      return new ajQuery.fn.init(selector);\n    }\n    ajQuery.fn = ajQuery.prototype = {\n      name: \"aaron\",\n      init: function(selector){\n        this.selector = selector;\n        return this;\n        },\n      constructor: ajQuery\n    }\n     ajQuery.fn.init.prototype = ajQuery.fn;\n     ajQuery.extend = ajQuery.fn.extend = function(){\n       var options, src, copy, target = arguments[0]||{},i = 1, length = arguments.length;\n       //只有一个参数，就是对jQuery自身的扩展处理\n       //extend,fn.extend\n       if(i === length){\n         target = this; //调用的上下文对象jQuery/或者实例\n         i--;\n       }\n       for(;i < length; i++){\n         //从i开始取参数，不为空开始遍历\n         if((options = arguments[i])!=null){\n           for(name in options){\n             copy = options[name];\n             //覆盖拷贝\n             target[name] = copy;\n           }\n         }\n       }\n       return target;\n     }\n     ajQuery.fn.extend({\n       setName: function(myName){\n         this.myName = myName;\n         return this;\n       },\n       getName: function(){\n         document.querySelector(\"#aaron\").innerHTML = this.myName;\n         return this;\n       }\n     })\n   $$().setName(\"张辉是个大傻逼\").getName();\n```\n# 11. 回溯处理的设计\n## 1. 关于jQuery对象的包装\n```javascript\n  var $test = $('test');\n```\n返回jQuery对象  \n![img](/images/prevObject.jpg)  \n> jQuery内部维护着一个jQuery对象栈， 每个遍历方法都会找到一组新元素（一个jQuery对象），然后jQuery会把这组元素推入到栈中。  \n> 而每个jQuery对象都有三个属性： context、selector和prevObject, 其中的prevObject属性就指向这个对象栈中的前一个对象，通过这个属性可以回溯到最初的DOM元素集中。  \n\n```javascript\n  <ul id=\"test\">\n    parent\n    <li>child</li>\n  </ul>\n //分开\n var aa = $('#test);\n test.find('li').click(function(){\n   alert(1); //1\n })\n test.click(function(){\n   alert(2)\n })\n//链式\ntest.find('li').click(function(){\n  alert(1);\n}).end().click(function(){\n  alert(2);\n}) \n```\njQuery为我们操作内部对象栈提供了非常有用的2个方法\n- .end()\n  回到前一个jQuery对象\n- .addBack()\n  调用它会在栈中回溯一个位置，然后把两个位置上的元素组合起来，并把这个新的组合之后的元素集推入栈的上方  \n\n利用这个DOM元素栈可以减少重复的查询和遍历的操作\n\n\n# 11. end与addBack\n## \b源码实现\n```javascript\n  end: function(){\n    return this.prevObject || this.constructor(null);\n  }\n\n  jQuery.fn.extend({\n    find: function(selector){\n          jQuery.find(selector, self[i], ret);\n          //Needed because $(selector,context)becomes $(context).find(selector)\n          ret = this.pushStack(len > 1? jQuery.unique(ret):ret);\n          ret.selector = this.selector?this.selector + \" \" + selector: selector;\n          return ret;\n    }\n  })\n```\n>流程解析   \n1. 首先构建一个新的jQuery对象，因为constructor是指向构造器的，所以这里就等同于调用jQuery()方法了，返回了一个新的jQuery对象   \n2. 然后用jQuery.merge语句把elems节点合并到新的jQuery对象   \n3. 最后给返回的新jQuery对象添加prevObject属性\n\n\n# 12. 仿栈与队列的操作\n## 1. get方法\n```javascript\n  get: function(num){\n    return num != null?//Return just the one element from the set\n    (num < 0 ? this[num + this.length]):this[num]//Return all the elements in a clean array\n    slice.call(this)\n  }\n\n```","source":"_posts/learnJquery.md","raw":"---\ntitle: learnJquery\ndate: 2017-06-04 15:58:36\ntags:\n---\n# 1. jQuery整体架构\n![img](http://www.ceerqingting.com/2017/06/04/learnJquery/jquery.jpg)\n```javascript\n    //函数自执行\n    (function(global, factory) {\n       factory(global);\n          }(typeof window !== \"undefined\" ? window : this, function(window, noGlobal) {\n              var jQuery = function( selector, context ) {\n              return new jQuery.fn.init( selector, context );\n            };\n            jQuery.fn = jQuery.prototype = {};\n            // 核心方法\n            // 回调系统\n            // 异步队列\n            // 数据缓存\n            // 队列操作\n            // 选择器引\n            // 属性操作\n            // 节点遍历\n            // 文档处理\n            // 样式操作\n            // 属性操作\n            // 事件体系\n            // AJAX交互\n            // 动画引擎\n            return jQuery;\n     }));\n```\n\n## 1. 五大块\n- 选择器\n- DOM操作\n- 事件\n- AJAX\n- 动画\n\n## 2. 示例\n- 接口：\n```javascript\n      .ajaxComplete()\n      .ajaxError()\n      .ajaxSend()\n      .ajaxStart()\n      .ajaxStop()\n      .ajaxSuccess()\n```\n- 底层接口：\n```javascript\n    jQuery.ajax()\n    jQuery.ajaxSetup()\n```\n- 快捷方法：<br>\n```javascript\n    jQuery.get()\n    jQuery.getJSON()\n    jQuery.getScript()\n    jQuery.post()\n```\n## 3. jQuery接口设计原理\n```javascript\n    jQuery.each([\"get\", \"post\"]), function(i, method){\n      jQuery[ method ] = function( url, data, callback, type) {\n        //Shift arguments if data argument was omitted\n        if( jQuery.isFunction( data )){\n          type = type || callback;\n          callback = dta;\n          data = undefined;\n        }\n        return jQuery.ajax({\n          url: url,\n          type: method,\n          data: data,\n          success: callback\n        })\n      }\n    }\n```\n\n# 2. 立即调用表达式\n> \b解决命名空间与变量污染的问题  \n参考：[立即调用的函数表达式](http://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html)  \n\n## 1. 写法\n```javascript\n//写法一：\n  (function(window, factory){\n    factory(window)\n  }(this, function(){\n    return function(){\n      //jQuery的调用\n    }\n  }))\n//写法二：\n  var factory = function(){\n    return function(){\n      //执行方法\n    }\n  }\n  var jQuery = factory();\n//写法三：\n  (function(window, undefined){\n    var jQuery = function(){}\n    //....\n    window.jQuery = window.$ = jQuery;\n  })(window);\n```\n## 2. 写法优势\n  - window和undefined都是为了减少变量查找所经过的scope作用域。当window通过传递给闭包内部之后，在闭包内部使用它的时候，可以把它当成一个局部变量，显然比原先在window scope下查找的时候要快一些。\n\n  - undefined也是同样道理，其实这个undefined并不是JavaScript数据类型的undefined，而是\b一个普普通通的变量名。只是因为没给它传递值，他的值就是undefined, undefined并不是JavaScript的保留字。  \n   \n## 3. 为什么要传递undefined  \n```javascript\n//Applications Javscript中的undefined并不是作为关键字 因此可以允许用户对其赋值  \n var undefined = \"a\";\n (function(window){\n   alert(undefined); //IE8 \"a\"\n })(window)\n```\n## 4. 为什么要创建一个外层包裹\n```javascript\n  1、匿名函数与自执行\n    function(){\n      //代码逻辑\n    }\n   //上面这种写法是错了，声明了它但是又不给名字又没有使用，所以在语法上错误的，那么怎么去执行一个匿名的函数呢？\n   //要调用一个函数，我们必须要有方法定位它、引用它。所以，我们要取一个名字：\n   var jQuery = function(){\n     //代码逻辑\n   }\n   //jQuery使用()将匿名函数括起来，然后后面再加一对小括号（包含参数列表），那么这小括号能把我们的表达式组合分块，并且每一块（也就是每一对小括号），都有一个返回值。这个返回值实际上也就是小括号中表达式的返回值。所以，当我们用一对小括号把匿名函数括起来的时候，实际上小括号返回的，就是一个匿名函数的Function对象。因此，小括号对加上匿名函数就如同有名字的函数般被我们取得它的引用位置了。所以如果在这个引用变量后面再加上参数列表，就会实现普通函数的调用形式。\n\n2、jQuery在不同平台的下的加载逻辑\n // AMD 和 CommonJS 的支持代码\n  if(typeof module === \"object\" && typeof module.export === \"object\"){\n    module.exports = global.document ? factory(global, true): function(w){\n      if(!w.document){\n        throw new Error(\"jQuery requires a window with a document\");\n      }\n      return factory(w);\n    }\n  }else{\n    factory(global);\n  }\n```\n## 5. 总结\n> 全局变量是魔鬼, 匿名函数可以有效的保证在页面上写入JavaScript，而不会造成全局变量的污染，通过小括号，让其加载的时候立即初始化，这样就形成了一个单例模式的效果从而只会执行一次。\n\n# 3. jQuery的类数组对象结构\n## 1. 为什么是类数组对象呢？  \n```javascript\n//9种方法重载\n  1.jQuery([selector, [context]])\n  2.jQuery(element)\n  3.jQuery(elementArray)\n  4.jQUery(object)\n  5.jQuery(jQuery object)\n  6.jQuery(html, [ownerDocument])\n  7.jQuery(html, [attributes])\n  8.jQuery()\n  9.jQuery(callback)\n```\n>9种方法整体可以分三大块： 选择器、dom的处理、dom加载\n换句话说jQuery就是为了获取DOM、操作DOM而存在的，所以为了更方便这些操作，让节点\b与实例对象通过一个桥梁给关联起来，jQuery内部就采用了一种叫“类数组对象”的方法作为存储接口，所以我们既可以像对象一样处理jQuery操作，也能像数组一样可以使用push、pop、shift、unshift、sort、each、map等类数组的方法操作jQuery对象了  \n\n## 2. jQuery对象可用数组下标索引是什么原理?  \n\b通过$(\".Class\")构建的对象结构如下：  \n![img](/images/selector.jpg)  \n```javascript\n  var aQuery = function(selector){\n      if(!(this instanceof aQuery)){\n        return new aQuery(selector);\n      }\n      var elem = document.getElementById(/[^#].*/.exec(selector)[0]);\n      this.length = 1;\n      this[0] = elem;\n      this.context = document;\n      this.selector = selector;\n      this.get = function(num){\n        return this[num];\n      }\n      return this;\n    }\n```\n>通过对象键值对的关系保存属性， 原型保存方法, 以上为模拟jQuery的对象结构  \n\n## 3. jQuery的无new构建原理\n>函数aQuery()内部首先保证了必须是通过new操作符构建。这样就能保证当前构建的是一个带有this的实例对象，既然是对象我们可以把所有的属性与方法作为对象的key与value的方式给映射到this上，所以如上结构就可以模拟出jQuery这样的操作了，即可通过索引取值，页也可以链式方法取值，但是缺陷是每次调用ajQuery方法等于是创建了一个新的实例，那么类似get方法就要在每一个实例上重新创建一遍，性能大打折扣，所以jQuery在结构上的优化不仅仅只是我们看到的，除了实现类数组结构、方法的原型共享，而且还实现方法的静态与实例的共存\n\n# 4. jQuery中的ready与load事件\n## 1. jQuery3种针对文档加载\b的方法\n```javascript\n$(document).ready(function(){\n  //...代码...\n})\n//document ready简写\n$(function(){\n   //...代码...\n})\n$(document).load(function(){\n   //...代码...\n})\n```\n## 2. ready和load区别\n>DOM文档加载步骤\n1. 解析HTML结构\n2. 加载外部脚本和样式表文件\n3. 解析并执行脚本代码\n4. 构造HTML DOM模型。//ready\n5. 加载图片等外部文件\n6. 页面加载完毕 //load\n```javascript\n  //jQuery处理文档加载时机\n  jQuery.ready.promise = function( obj ){\n    if(!readyList){\n      readyList = jQuery.Deferred();\n      if(document.readyState === 'complete'){\n        //Handle it asynchronously to allow scripts the opportunity to delay ready\n        setTimeot(jQuery.ready);\n      }else{\n        document.addEventListener(\"DOMContentLoaded\",completed, false);\n        window.addEventListner(\"load\", completed, false)\n      }\n    }\n    return readyList.promise(obj);\n  }\n```\n# 5. jQuery多库共存处理\n## 1. 使用DEMO\n```javascript\n  jQuery.noConflict();\n  //使用jQuery\n  jQuery(\"aaron\").show();\n  //使用其他库的$()\n  $(\"aa\").style.display = \"block\";\n  //这个函数必须在导入jQuery文件之后，并且在导入另一个导致冲突的库之前使用\n```\n## 2. 原理\n```javascript\n  var _jQuery = window.jQuery, _$ = window.$;\n  jQuery.noConflict = function(deep){\n    if(window.$ === jQuery){\n      window.$ = _$;\n    }\n    if(deep && window.jQuery === jQuery){\n      window.jQuery = _jQuery;\n    }\n    return jQuery;\n  }\n```\n# 6. 对象的构建\n```javascript\n//类一\n  function ajQuery(){\n    this.name = 'jQuery';\n    this.sayName = function(){\n      return this.name;\n    }\n  }\n  var a = new ajQuery();\n  var b = new ajQuery();\n  var c = new ajQuery();\n\n//类二\n function ajQuery(){\n   this.name = 'jQuery';\n }  \n ajQuery.prototype = {\n   sayName: function(){\n     return this.name\n   }\n }\n var a  = new ajQuery();\n var b  = new ajQuery();\n var c  = new ajQuery();\n```\n类一与类二产生的结构几乎是一样的，本质区别是：  \n类二new产生的a、b、c三个实例对象共享了原型的sayName方法，节省了内存空间，类一则是要为每一个实例复制sayName方法，每个\b方法属性都占用一定空间，类二则是要通过scope连接到原型链查找，无形之中要多一层作用域的查找\n```javascript\n  //jQUery对象的构建\n  jQuery = function(selector, context){\n    return new jQuery.fn.init(selector, context);\n  }\n  jQuery.fn = jQuery.prototype = {\n    init: function(){\n      return this\n    },\n    jquery: version,\n    constructor: jQuery,\n    ....\n  }\n  var a = $();\n```\najQuery与jQuery结构不同点：\n1. 没有采用new操作符\n2. return返回的是一个通过new出来的对象\n\n# 7. 分离构造器\n## 1. 通过new操作符构建一个对象：\n   - 创建一个新对象\n   - 将构造函数的作用域赋给新对象（所以this就指向了这个新对象）\n   - 执行构造函数中的代码\n   - 返回这个新对象  \n```javascript\n  //常见类式写法\n  var $$ = ajQuery = function(selector){\n    this.selector = selector;\n    return this;\n  }\n  ajQuery.fn = ajQuery.prototype = {\n    selectorName: function(){\n      return this.selector;\n    },\n    construction: ajQuery\n  }\n  var a = new $$('aaa');\n  a.selectorName();//aaa\n```\n改造jQuery无new格式\n```javascript\n  var $$ = ajQuery = function(selector){\n    if(!(this instanceof ajQuery)){\n      return new ajQuery(selector);\n    }\n    this.selector = selector;\n    return this\n  }\n```\n错误写法：\n```javascript\n   var $$ = ajQuery = function(selecotr){\n     this.selector = selector;\n     return new ajQuery(selector);\n   }\n   //Uncaught RangeError: Maximum call stact size exceeded\n```\njQuery为了避免出现这种死循环，采取的方法为把原型上的一个init方法作为构造器\n```javascript\n  var $$ = ajQuery = function(selector){\n    //把原型上的init作为构造器\n    return new ajQuery.fn.init(selector);\n  }\n  ajQuery.fn = ajQuery.prototype = {\n    name: 'aaron',\n    init: function(){\n      console.log(this);\n    },\n    constructor: ajQuery\n  }\n```\n问题：init是ajQuery原型上作为构造器的一个方法，那么this就不是ajQuery了，所以this就完全引用不到ajQuery的原型了，这里通过new把init方法与ajQuery给分离成2个独立的构造器\n\n# 8. 静态与实例方法共享设计\n## 1. 遍历方法\n```javascript\n  $('.aaron').each() //作为实例方法存在\n  $.each() //作为静态方法存在\n```\n第一条语句是给有指定的上下文调用的，就是$('.aaron')获取的DOM合集，第二条语句$.each()函数可用于迭代任何集合，无论是“名/值”对象或者数组。在迭代数组的情况下，回调函数每次都会传递一个数组索引和相应的数组值作为参数，那是不是要写两个方法\n```javascript\n  //jQuery源码\n  jQuery.prototype = {\n    each: function(callback, args){\n      return jQuery.each(this, callback, args);\n    }\n  }\n```\n## 2. 共享方法\n> jQuery通过new原型prototype上的init方法当做构造器，那么init的原型链方法就是实例的方法，所以jQuery通过2个构造器划分2种不同的调用方式，一种是静态，一种是原型，方法是共享的\n```javascript\n//jQuery方案\n  ajQuery.fn = ajQuery.prototype = {\n    name: 'aaron',\n    init: function(selector){\n      this.selector = selector;\n      return this;\n    },\n    constructor: ajQuery\n  }\n  ajQuery.fn.init.prototype = ajQuery.fn;\n```\n![img](/images/init.jpg)  \n通过原型传递解决问题，把jQuery的原型传递给jQuery.prototype.init.prototype,因为是引用传递所以不需要担心循环引用性能的问题\n# 9. 方法链式调用的实现 \n## 1. DSL\n> Domain Specific Language: 用于描述和解决特定领域问题的语言\n```javascript\n $('input[type=\"button\"]').eq(0).click(function(){\n    alert('点击我！')\n}).end().eq(1).click(function(){\n    $('input[type=\"button\"]:eq(0)').trigger('click');\n}).end().eq(2).toggle(function(){\n    console.log('toggle')\n})\n```\n这种管道风格的DSL链式代码：\n- 节约JS代码\n- 所返回的都是同一个对象，提高代码效率\n## 2. return this\n```javascript\n   var $$ = ajQuery = function(selector){\n      return new ajQuery.fn.init(selector);\n    }\n    ajQuery.fn = ajQuery.prototype = {\n      name: 'aaron',\n      init: function(selector){\n        this.selector = selector;\n        return this;\n      },\n      constructor: ajQuery\n    }\n    ajQuery.fn.init.prototype = ajQuery.fn;\n    ajQuery.fn.setName = function(myName){\n      this.myName = myName;\n      return this;\n    }\n    ajQuery.fn.getName = function(){\n      $('#aaron').html(this.myName);\n      return this;\n    }\n    $$().setName('jiangfen').getName();\n```\n如果需要链式处理，只需要在方法内部返回当前这个实例对象的this就可以了，因为返回当前实例的this,从而可以访问自己的原型。这样处理只是\b同步链式，除了同步链式还有异步链式。\n\n# 10. 插件接口的设计\n## 1. jQuery插件开发分为两种\n- 挂在jQuery命名空间下的全局函数，也可称为静态方法\n- 挂在jQuery原型下的方法，这样通过选择器的jQuery对象实例也能共享该方法。\n\n```javascript\n  //提供的接口\n  $.extend(target, [object1], [objectN])\n  //接口的使用： \n  jQuery.extend({\n    data: function(){},\n    removeData: function(){}\n  })\n\n  jQuery.fn.extend({\n    data: function(){},\n    removeData: function(){}\n  })\n```\n## 2. jQuery实现方法  \n- jQuery支持自己扩展属性，jQuery.extend和jQuery.fn.extend其实是同指向同一方法的不同引用\n- \bjQuery.extend调用的\b时候上下文指向的是jQuery构造器\n- jQuery.fn.extend调用的时候上下文指向的是jQuery构造器的实例对象\n```javascript\n   var  $$ = ajQuery = function(selector){\n      return new ajQuery.fn.init(selector);\n    }\n    ajQuery.fn = ajQuery.prototype = {\n      name: \"aaron\",\n      init: function(selector){\n        this.selector = selector;\n        return this;\n        },\n      constructor: ajQuery\n    }\n     ajQuery.fn.init.prototype = ajQuery.fn;\n     ajQuery.extend = ajQuery.fn.extend = function(){\n       var options, src, copy, target = arguments[0]||{},i = 1, length = arguments.length;\n       //只有一个参数，就是对jQuery自身的扩展处理\n       //extend,fn.extend\n       if(i === length){\n         target = this; //调用的上下文对象jQuery/或者实例\n         i--;\n       }\n       for(;i < length; i++){\n         //从i开始取参数，不为空开始遍历\n         if((options = arguments[i])!=null){\n           for(name in options){\n             copy = options[name];\n             //覆盖拷贝\n             target[name] = copy;\n           }\n         }\n       }\n       return target;\n     }\n     ajQuery.fn.extend({\n       setName: function(myName){\n         this.myName = myName;\n         return this;\n       },\n       getName: function(){\n         document.querySelector(\"#aaron\").innerHTML = this.myName;\n         return this;\n       }\n     })\n   $$().setName(\"张辉是个大傻逼\").getName();\n```\n# 11. 回溯处理的设计\n## 1. 关于jQuery对象的包装\n```javascript\n  var $test = $('test');\n```\n返回jQuery对象  \n![img](/images/prevObject.jpg)  \n> jQuery内部维护着一个jQuery对象栈， 每个遍历方法都会找到一组新元素（一个jQuery对象），然后jQuery会把这组元素推入到栈中。  \n> 而每个jQuery对象都有三个属性： context、selector和prevObject, 其中的prevObject属性就指向这个对象栈中的前一个对象，通过这个属性可以回溯到最初的DOM元素集中。  \n\n```javascript\n  <ul id=\"test\">\n    parent\n    <li>child</li>\n  </ul>\n //分开\n var aa = $('#test);\n test.find('li').click(function(){\n   alert(1); //1\n })\n test.click(function(){\n   alert(2)\n })\n//链式\ntest.find('li').click(function(){\n  alert(1);\n}).end().click(function(){\n  alert(2);\n}) \n```\njQuery为我们操作内部对象栈提供了非常有用的2个方法\n- .end()\n  回到前一个jQuery对象\n- .addBack()\n  调用它会在栈中回溯一个位置，然后把两个位置上的元素组合起来，并把这个新的组合之后的元素集推入栈的上方  \n\n利用这个DOM元素栈可以减少重复的查询和遍历的操作\n\n\n# 11. end与addBack\n## \b源码实现\n```javascript\n  end: function(){\n    return this.prevObject || this.constructor(null);\n  }\n\n  jQuery.fn.extend({\n    find: function(selector){\n          jQuery.find(selector, self[i], ret);\n          //Needed because $(selector,context)becomes $(context).find(selector)\n          ret = this.pushStack(len > 1? jQuery.unique(ret):ret);\n          ret.selector = this.selector?this.selector + \" \" + selector: selector;\n          return ret;\n    }\n  })\n```\n>流程解析   \n1. 首先构建一个新的jQuery对象，因为constructor是指向构造器的，所以这里就等同于调用jQuery()方法了，返回了一个新的jQuery对象   \n2. 然后用jQuery.merge语句把elems节点合并到新的jQuery对象   \n3. 最后给返回的新jQuery对象添加prevObject属性\n\n\n# 12. 仿栈与队列的操作\n## 1. get方法\n```javascript\n  get: function(num){\n    return num != null?//Return just the one element from the set\n    (num < 0 ? this[num + this.length]):this[num]//Return all the elements in a clean array\n    slice.call(this)\n  }\n\n```","slug":"learnJquery","published":1,"updated":"2017-07-03T05:46:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9pgkqf00004dz37x86pmu46","content":"<h1 id=\"1-jQuery整体架构\"><a href=\"#1-jQuery整体架构\" class=\"headerlink\" title=\"1. jQuery整体架构\"></a>1. jQuery整体架构</h1><p><img src=\"http://www.ceerqingting.com/2017/06/04/learnJquery/jquery.jpg\" alt=\"img\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//函数自执行</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">global, factory</span>) </span>&#123;</div><div class=\"line\">   factory(global);</div><div class=\"line\">      &#125;(<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">\"undefined\"</span> ? <span class=\"built_in\">window</span> : <span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window, noGlobal</span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> selector, context </span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> jQuery.fn.init( selector, context );</div><div class=\"line\">        &#125;;</div><div class=\"line\">        jQuery.fn = jQuery.prototype = &#123;&#125;;</div><div class=\"line\">        <span class=\"comment\">// 核心方法</span></div><div class=\"line\">        <span class=\"comment\">// 回调系统</span></div><div class=\"line\">        <span class=\"comment\">// 异步队列</span></div><div class=\"line\">        <span class=\"comment\">// 数据缓存</span></div><div class=\"line\">        <span class=\"comment\">// 队列操作</span></div><div class=\"line\">        <span class=\"comment\">// 选择器引</span></div><div class=\"line\">        <span class=\"comment\">// 属性操作</span></div><div class=\"line\">        <span class=\"comment\">// 节点遍历</span></div><div class=\"line\">        <span class=\"comment\">// 文档处理</span></div><div class=\"line\">        <span class=\"comment\">// 样式操作</span></div><div class=\"line\">        <span class=\"comment\">// 属性操作</span></div><div class=\"line\">        <span class=\"comment\">// 事件体系</span></div><div class=\"line\">        <span class=\"comment\">// AJAX交互</span></div><div class=\"line\">        <span class=\"comment\">// 动画引擎</span></div><div class=\"line\">        <span class=\"keyword\">return</span> jQuery;</div><div class=\"line\"> &#125;));</div></pre></td></tr></table></figure></p>\n<h2 id=\"1-五大块\"><a href=\"#1-五大块\" class=\"headerlink\" title=\"1. 五大块\"></a>1. 五大块</h2><ul>\n<li>选择器</li>\n<li>DOM操作</li>\n<li>事件</li>\n<li>AJAX</li>\n<li>动画</li>\n</ul>\n<h2 id=\"2-示例\"><a href=\"#2-示例\" class=\"headerlink\" title=\"2. 示例\"></a>2. 示例</h2><ul>\n<li><p>接口：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.ajaxComplete()</div><div class=\"line\">.ajaxError()</div><div class=\"line\">.ajaxSend()</div><div class=\"line\">.ajaxStart()</div><div class=\"line\">.ajaxStop()</div><div class=\"line\">.ajaxSuccess()</div></pre></td></tr></table></figure>\n</li>\n<li><p>底层接口：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.ajax()</div><div class=\"line\">jQuery.ajaxSetup()</div></pre></td></tr></table></figure>\n</li>\n<li><p>快捷方法：<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.get()</div><div class=\"line\">jQuery.getJSON()</div><div class=\"line\">jQuery.getScript()</div><div class=\"line\">jQuery.post()</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3-jQuery接口设计原理\"><a href=\"#3-jQuery接口设计原理\" class=\"headerlink\" title=\"3. jQuery接口设计原理\"></a>3. jQuery接口设计原理</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.each([<span class=\"string\">\"get\"</span>, <span class=\"string\">\"post\"</span>]), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, method</span>)</span>&#123;</div><div class=\"line\">  jQuery[ method ] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> url, data, callback, type</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//Shift arguments if data argument was omitted</span></div><div class=\"line\">    <span class=\"keyword\">if</span>( jQuery.isFunction( data ))&#123;</div><div class=\"line\">      type = type || callback;</div><div class=\"line\">      callback = dta;</div><div class=\"line\">      data = <span class=\"literal\">undefined</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> jQuery.ajax(&#123;</div><div class=\"line\">      <span class=\"attr\">url</span>: url,</div><div class=\"line\">      <span class=\"attr\">type</span>: method,</div><div class=\"line\">      <span class=\"attr\">data</span>: data,</div><div class=\"line\">      <span class=\"attr\">success</span>: callback</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"2-立即调用表达式\"><a href=\"#2-立即调用表达式\" class=\"headerlink\" title=\"2. 立即调用表达式\"></a>2. 立即调用表达式</h1><blockquote>\n<p>\b解决命名空间与变量污染的问题<br>参考：<a href=\"http://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html\" target=\"_blank\" rel=\"external\">立即调用的函数表达式</a>  </p>\n</blockquote>\n<h2 id=\"1-写法\"><a href=\"#1-写法\" class=\"headerlink\" title=\"1. 写法\"></a>1. 写法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//写法一：</span></div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window, factory</span>)</span>&#123;</div><div class=\"line\">    factory(<span class=\"built_in\">window</span>)</div><div class=\"line\">  &#125;(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//jQuery的调用</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;))</div><div class=\"line\"><span class=\"comment\">//写法二：</span></div><div class=\"line\">  <span class=\"keyword\">var</span> factory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//执行方法</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">var</span> jQuery = factory();</div><div class=\"line\"><span class=\"comment\">//写法三：</span></div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window, undefined</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">    <span class=\"comment\">//....</span></div><div class=\"line\">    <span class=\"built_in\">window</span>.jQuery = <span class=\"built_in\">window</span>.$ = jQuery;</div><div class=\"line\">  &#125;)(<span class=\"built_in\">window</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"2-写法优势\"><a href=\"#2-写法优势\" class=\"headerlink\" title=\"2. 写法优势\"></a>2. 写法优势</h2><ul>\n<li><p>window和undefined都是为了减少变量查找所经过的scope作用域。当window通过传递给闭包内部之后，在闭包内部使用它的时候，可以把它当成一个局部变量，显然比原先在window scope下查找的时候要快一些。</p>\n</li>\n<li><p>undefined也是同样道理，其实这个undefined并不是JavaScript数据类型的undefined，而是\b一个普普通通的变量名。只是因为没给它传递值，他的值就是undefined, undefined并不是JavaScript的保留字。  </p>\n</li>\n</ul>\n<h2 id=\"3-为什么要传递undefined\"><a href=\"#3-为什么要传递undefined\" class=\"headerlink\" title=\"3. 为什么要传递undefined\"></a>3. 为什么要传递undefined</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Applications Javscript中的undefined并不是作为关键字 因此可以允许用户对其赋值  </span></div><div class=\"line\"> <span class=\"keyword\">var</span> <span class=\"literal\">undefined</span> = <span class=\"string\">\"a\"</span>;</div><div class=\"line\"> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window</span>)</span>&#123;</div><div class=\"line\">   alert(<span class=\"literal\">undefined</span>); <span class=\"comment\">//IE8 \"a\"</span></div><div class=\"line\"> &#125;)(<span class=\"built_in\">window</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"4-为什么要创建一个外层包裹\"><a href=\"#4-为什么要创建一个外层包裹\" class=\"headerlink\" title=\"4. 为什么要创建一个外层包裹\"></a>4. 为什么要创建一个外层包裹</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"number\">1</span>、匿名函数与自执行</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//代码逻辑</span></div><div class=\"line\">    &#125;</div><div class=\"line\">   <span class=\"comment\">//上面这种写法是错了，声明了它但是又不给名字又没有使用，所以在语法上错误的，那么怎么去执行一个匿名的函数呢？</span></div><div class=\"line\">   <span class=\"comment\">//要调用一个函数，我们必须要有方法定位它、引用它。所以，我们要取一个名字：</span></div><div class=\"line\">   <span class=\"keyword\">var</span> jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"comment\">//代码逻辑</span></div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"comment\">//jQuery使用()将匿名函数括起来，然后后面再加一对小括号（包含参数列表），那么这小括号能把我们的表达式组合分块，并且每一块（也就是每一对小括号），都有一个返回值。这个返回值实际上也就是小括号中表达式的返回值。所以，当我们用一对小括号把匿名函数括起来的时候，实际上小括号返回的，就是一个匿名函数的Function对象。因此，小括号对加上匿名函数就如同有名字的函数般被我们取得它的引用位置了。所以如果在这个引用变量后面再加上参数列表，就会实现普通函数的调用形式。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2</span>、jQuery在不同平台的下的加载逻辑</div><div class=\"line\"> <span class=\"comment\">// AMD 和 CommonJS 的支持代码</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span>.export === <span class=\"string\">\"object\"</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">module</span>.exports = global.document ? factory(global, <span class=\"literal\">true</span>): <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(!w.document)&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"jQuery requires a window with a document\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> factory(w);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    factory(global);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><blockquote>\n<p>全局变量是魔鬼, 匿名函数可以有效的保证在页面上写入JavaScript，而不会造成全局变量的污染，通过小括号，让其加载的时候立即初始化，这样就形成了一个单例模式的效果从而只会执行一次。</p>\n</blockquote>\n<h1 id=\"3-jQuery的类数组对象结构\"><a href=\"#3-jQuery的类数组对象结构\" class=\"headerlink\" title=\"3. jQuery的类数组对象结构\"></a>3. jQuery的类数组对象结构</h1><h2 id=\"1-为什么是类数组对象呢？\"><a href=\"#1-为什么是类数组对象呢？\" class=\"headerlink\" title=\"1. 为什么是类数组对象呢？\"></a>1. 为什么是类数组对象呢？</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//9种方法重载</span></div><div class=\"line\">  <span class=\"number\">1.</span>jQuery([selector, [context]])</div><div class=\"line\">  <span class=\"number\">2.</span>jQuery(element)</div><div class=\"line\">  <span class=\"number\">3.</span>jQuery(elementArray)</div><div class=\"line\">  <span class=\"number\">4.</span>jQUery(object)</div><div class=\"line\">  <span class=\"number\">5.</span>jQuery(jQuery object)</div><div class=\"line\">  <span class=\"number\">6.</span>jQuery(html, [ownerDocument])</div><div class=\"line\">  <span class=\"number\">7.</span>jQuery(html, [attributes])</div><div class=\"line\">  <span class=\"number\">8.</span>jQuery()</div><div class=\"line\">  <span class=\"number\">9.</span>jQuery(callback)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>9种方法整体可以分三大块： 选择器、dom的处理、dom加载<br>换句话说jQuery就是为了获取DOM、操作DOM而存在的，所以为了更方便这些操作，让节点\b与实例对象通过一个桥梁给关联起来，jQuery内部就采用了一种叫“类数组对象”的方法作为存储接口，所以我们既可以像对象一样处理jQuery操作，也能像数组一样可以使用push、pop、shift、unshift、sort、each、map等类数组的方法操作jQuery对象了  </p>\n</blockquote>\n<h2 id=\"2-jQuery对象可用数组下标索引是什么原理\"><a href=\"#2-jQuery对象可用数组下标索引是什么原理\" class=\"headerlink\" title=\"2. jQuery对象可用数组下标索引是什么原理?\"></a>2. jQuery对象可用数组下标索引是什么原理?</h2><p>\b通过$(“.Class”)构建的对象结构如下：<br><img src=\"/images/selector.jpg\" alt=\"img\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> aQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> aQuery))&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> aQuery(selector);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> elem = <span class=\"built_in\">document</span>.getElementById(<span class=\"regexp\">/[^#].*/</span>.exec(selector)[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"keyword\">this</span>.length = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>[<span class=\"number\">0</span>] = elem;</div><div class=\"line\">    <span class=\"keyword\">this</span>.context = <span class=\"built_in\">document</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.selector = selector;</div><div class=\"line\">    <span class=\"keyword\">this</span>.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[num];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>通过对象键值对的关系保存属性， 原型保存方法, 以上为模拟jQuery的对象结构  </p>\n</blockquote>\n<h2 id=\"3-jQuery的无new构建原理\"><a href=\"#3-jQuery的无new构建原理\" class=\"headerlink\" title=\"3. jQuery的无new构建原理\"></a>3. jQuery的无new构建原理</h2><blockquote>\n<p>函数aQuery()内部首先保证了必须是通过new操作符构建。这样就能保证当前构建的是一个带有this的实例对象，既然是对象我们可以把所有的属性与方法作为对象的key与value的方式给映射到this上，所以如上结构就可以模拟出jQuery这样的操作了，即可通过索引取值，页也可以链式方法取值，但是缺陷是每次调用ajQuery方法等于是创建了一个新的实例，那么类似get方法就要在每一个实例上重新创建一遍，性能大打折扣，所以jQuery在结构上的优化不仅仅只是我们看到的，除了实现类数组结构、方法的原型共享，而且还实现方法的静态与实例的共存</p>\n</blockquote>\n<h1 id=\"4-jQuery中的ready与load事件\"><a href=\"#4-jQuery中的ready与load事件\" class=\"headerlink\" title=\"4. jQuery中的ready与load事件\"></a>4. jQuery中的ready与load事件</h1><h2 id=\"1-jQuery3种针对文档加载的方法\"><a href=\"#1-jQuery3种针对文档加载的方法\" class=\"headerlink\" title=\"1. jQuery3种针对文档加载\b的方法\"></a>1. jQuery3种针对文档加载\b的方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//...代码...</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//document ready简写</span></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"comment\">//...代码...</span></div><div class=\"line\">&#125;)</div><div class=\"line\">$(<span class=\"built_in\">document</span>).load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"comment\">//...代码...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"2-ready和load区别\"><a href=\"#2-ready和load区别\" class=\"headerlink\" title=\"2. ready和load区别\"></a>2. ready和load区别</h2><blockquote>\n<p>DOM文档加载步骤</p>\n<ol>\n<li>解析HTML结构</li>\n<li>加载外部脚本和样式表文件</li>\n<li>解析并执行脚本代码</li>\n<li>构造HTML DOM模型。//ready</li>\n<li>加载图片等外部文件</li>\n<li>页面加载完毕 //load<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//jQuery处理文档加载时机</span></div><div class=\"line\">jQuery.ready.promise = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!readyList)&#123;</div><div class=\"line\">    readyList = jQuery.Deferred();</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.readyState === <span class=\"string\">'complete'</span>)&#123;</div><div class=\"line\">      <span class=\"comment\">//Handle it asynchronously to allow scripts the opportunity to delay ready</span></div><div class=\"line\">      setTimeot(jQuery.ready);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>,completed, <span class=\"literal\">false</span>);</div><div class=\"line\">      <span class=\"built_in\">window</span>.addEventListner(<span class=\"string\">\"load\"</span>, completed, <span class=\"literal\">false</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> readyList.promise(obj);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<h1 id=\"5-jQuery多库共存处理\"><a href=\"#5-jQuery多库共存处理\" class=\"headerlink\" title=\"5. jQuery多库共存处理\"></a>5. jQuery多库共存处理</h1><h2 id=\"1-使用DEMO\"><a href=\"#1-使用DEMO\" class=\"headerlink\" title=\"1. 使用DEMO\"></a>1. 使用DEMO</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.noConflict();</div><div class=\"line\"><span class=\"comment\">//使用jQuery</span></div><div class=\"line\">jQuery(<span class=\"string\">\"aaron\"</span>).show();</div><div class=\"line\"><span class=\"comment\">//使用其他库的$()</span></div><div class=\"line\">$(<span class=\"string\">\"aa\"</span>).style.display = <span class=\"string\">\"block\"</span>;</div><div class=\"line\"><span class=\"comment\">//这个函数必须在导入jQuery文件之后，并且在导入另一个导致冲突的库之前使用</span></div></pre></td></tr></table></figure>\n<h2 id=\"2-原理\"><a href=\"#2-原理\" class=\"headerlink\" title=\"2. 原理\"></a>2. 原理</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _jQuery = <span class=\"built_in\">window</span>.jQuery, _$ = <span class=\"built_in\">window</span>.$;</div><div class=\"line\">jQuery.noConflict = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">deep</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.$ === jQuery)&#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.$ = _$;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span>(deep &amp;&amp; <span class=\"built_in\">window</span>.jQuery === jQuery)&#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.jQuery = _jQuery;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> jQuery;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"6-对象的构建\"><a href=\"#6-对象的构建\" class=\"headerlink\" title=\"6. 对象的构建\"></a>6. 对象的构建</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//类一</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajQuery</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'jQuery'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> ajQuery();</div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> ajQuery();</div><div class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> ajQuery();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//类二</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajQuery</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.name = <span class=\"string\">'jQuery'</span>;</div><div class=\"line\"> &#125;  </div><div class=\"line\"> ajQuery.prototype = &#123;</div><div class=\"line\">   <span class=\"attr\">sayName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">var</span> a  = <span class=\"keyword\">new</span> ajQuery();</div><div class=\"line\"> <span class=\"keyword\">var</span> b  = <span class=\"keyword\">new</span> ajQuery();</div><div class=\"line\"> <span class=\"keyword\">var</span> c  = <span class=\"keyword\">new</span> ajQuery();</div></pre></td></tr></table></figure>\n<p>类一与类二产生的结构几乎是一样的，本质区别是：<br>类二new产生的a、b、c三个实例对象共享了原型的sayName方法，节省了内存空间，类一则是要为每一个实例复制sayName方法，每个\b方法属性都占用一定空间，类二则是要通过scope连接到原型链查找，无形之中要多一层作用域的查找<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//jQUery对象的构建</span></div><div class=\"line\">jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector, context</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> jQuery.fn.init(selector, context);</div><div class=\"line\">&#125;</div><div class=\"line\">jQuery.fn = jQuery.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">jquery</span>: version,</div><div class=\"line\">  <span class=\"attr\">constructor</span>: jQuery,</div><div class=\"line\">  ....</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = $();</div></pre></td></tr></table></figure></p>\n<p>ajQuery与jQuery结构不同点：</p>\n<ol>\n<li>没有采用new操作符</li>\n<li>return返回的是一个通过new出来的对象</li>\n</ol>\n<h1 id=\"7-分离构造器\"><a href=\"#7-分离构造器\" class=\"headerlink\" title=\"7. 分离构造器\"></a>7. 分离构造器</h1><h2 id=\"1-通过new操作符构建一个对象：\"><a href=\"#1-通过new操作符构建一个对象：\" class=\"headerlink\" title=\"1. 通过new操作符构建一个对象：\"></a>1. 通过new操作符构建一个对象：</h2><ul>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域赋给新对象（所以this就指向了这个新对象）</li>\n<li>执行构造函数中的代码</li>\n<li>返回这个新对象  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//常见类式写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> $$ = ajQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.selector = selector;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">ajQuery.fn = ajQuery.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">selectorName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.selector;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">construction</span>: ajQuery</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> $$(<span class=\"string\">'aaa'</span>);</div><div class=\"line\">a.selectorName();<span class=\"comment\">//aaa</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>改造jQuery无new格式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $$ = ajQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> ajQuery))&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ajQuery(selector);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">this</span>.selector = selector;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>错误写法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $$ = ajQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selecotr</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.selector = selector;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ajQuery(selector);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Uncaught RangeError: Maximum call stact size exceeded</span></div></pre></td></tr></table></figure></p>\n<p>jQuery为了避免出现这种死循环，采取的方法为把原型上的一个init方法作为构造器<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $$ = ajQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//把原型上的init作为构造器</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ajQuery.fn.init(selector);</div><div class=\"line\">&#125;</div><div class=\"line\">ajQuery.fn = ajQuery.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'aaron'</span>,</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">constructor</span>: ajQuery</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>问题：init是ajQuery原型上作为构造器的一个方法，那么this就不是ajQuery了，所以this就完全引用不到ajQuery的原型了，这里通过new把init方法与ajQuery给分离成2个独立的构造器</p>\n<h1 id=\"8-静态与实例方法共享设计\"><a href=\"#8-静态与实例方法共享设计\" class=\"headerlink\" title=\"8. 静态与实例方法共享设计\"></a>8. 静态与实例方法共享设计</h1><h2 id=\"1-遍历方法\"><a href=\"#1-遍历方法\" class=\"headerlink\" title=\"1. 遍历方法\"></a>1. 遍历方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'.aaron'</span>).each() <span class=\"comment\">//作为实例方法存在</span></div><div class=\"line\">$.each() <span class=\"comment\">//作为静态方法存在</span></div></pre></td></tr></table></figure>\n<p>第一条语句是给有指定的上下文调用的，就是$(‘.aaron’)获取的DOM合集，第二条语句$.each()函数可用于迭代任何集合，无论是“名/值”对象或者数组。在迭代数组的情况下，回调函数每次都会传递一个数组索引和相应的数组值作为参数，那是不是要写两个方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//jQuery源码</span></div><div class=\"line\">jQuery.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">each</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, args</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> jQuery.each(<span class=\"keyword\">this</span>, callback, args);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-共享方法\"><a href=\"#2-共享方法\" class=\"headerlink\" title=\"2. 共享方法\"></a>2. 共享方法</h2><blockquote>\n<p>jQuery通过new原型prototype上的init方法当做构造器，那么init的原型链方法就是实例的方法，所以jQuery通过2个构造器划分2种不同的调用方式，一种是静态，一种是原型，方法是共享的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//jQuery方案</span></div><div class=\"line\">  ajQuery.fn = ajQuery.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'aaron'</span>,</div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.selector = selector;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">constructor</span>: ajQuery</div><div class=\"line\">  &#125;</div><div class=\"line\">  ajQuery.fn.init.prototype = ajQuery.fn;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p><img src=\"/images/init.jpg\" alt=\"img\"><br>通过原型传递解决问题，把jQuery的原型传递给jQuery.prototype.init.prototype,因为是引用传递所以不需要担心循环引用性能的问题</p>\n<h1 id=\"9-方法链式调用的实现\"><a href=\"#9-方法链式调用的实现\" class=\"headerlink\" title=\"9. 方法链式调用的实现\"></a>9. 方法链式调用的实现</h1><h2 id=\"1-DSL\"><a href=\"#1-DSL\" class=\"headerlink\" title=\"1. DSL\"></a>1. DSL</h2><blockquote>\n<p>Domain Specific Language: 用于描述和解决特定领域问题的语言<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> $(<span class=\"string\">'input[type=\"button\"]'</span>).eq(<span class=\"number\">0</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'点击我！'</span>)</div><div class=\"line\">&#125;).end().eq(<span class=\"number\">1</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'input[type=\"button\"]:eq(0)'</span>).trigger(<span class=\"string\">'click'</span>);</div><div class=\"line\">&#125;).end().eq(<span class=\"number\">2</span>).toggle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'toggle'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>这种管道风格的DSL链式代码：</p>\n<ul>\n<li>节约JS代码</li>\n<li>所返回的都是同一个对象，提高代码效率<h2 id=\"2-return-this\"><a href=\"#2-return-this\" class=\"headerlink\" title=\"2. return this\"></a>2. return this</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $$ = ajQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ajQuery.fn.init(selector);</div><div class=\"line\"> &#125;</div><div class=\"line\"> ajQuery.fn = ajQuery.prototype = &#123;</div><div class=\"line\">   <span class=\"attr\">name</span>: <span class=\"string\">'aaron'</span>,</div><div class=\"line\">   <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">this</span>.selector = selector;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;,</div><div class=\"line\">   <span class=\"attr\">constructor</span>: ajQuery</div><div class=\"line\"> &#125;</div><div class=\"line\"> ajQuery.fn.init.prototype = ajQuery.fn;</div><div class=\"line\"> ajQuery.fn.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">myName</span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.myName = myName;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> ajQuery.fn.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   $(<span class=\"string\">'#aaron'</span>).html(<span class=\"keyword\">this</span>.myName);</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> $$().setName(<span class=\"string\">'jiangfen'</span>).getName();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果需要链式处理，只需要在方法内部返回当前这个实例对象的this就可以了，因为返回当前实例的this,从而可以访问自己的原型。这样处理只是\b同步链式，除了同步链式还有异步链式。</p>\n<h1 id=\"10-插件接口的设计\"><a href=\"#10-插件接口的设计\" class=\"headerlink\" title=\"10. 插件接口的设计\"></a>10. 插件接口的设计</h1><h2 id=\"1-jQuery插件开发分为两种\"><a href=\"#1-jQuery插件开发分为两种\" class=\"headerlink\" title=\"1. jQuery插件开发分为两种\"></a>1. jQuery插件开发分为两种</h2><ul>\n<li>挂在jQuery命名空间下的全局函数，也可称为静态方法</li>\n<li>挂在jQuery原型下的方法，这样通过选择器的jQuery对象实例也能共享该方法。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//提供的接口</span></div><div class=\"line\">$.extend(target, [object1], [objectN])</div><div class=\"line\"><span class=\"comment\">//接口的使用： </span></div><div class=\"line\">jQuery.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">removeData</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">jQuery.fn.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">removeData</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"2-jQuery实现方法\"><a href=\"#2-jQuery实现方法\" class=\"headerlink\" title=\"2. jQuery实现方法\"></a>2. jQuery实现方法</h2><ul>\n<li>jQuery支持自己扩展属性，jQuery.extend和jQuery.fn.extend其实是同指向同一方法的不同引用</li>\n<li>\bjQuery.extend调用的\b时候上下文指向的是jQuery构造器</li>\n<li>jQuery.fn.extend调用的时候上下文指向的是jQuery构造器的实例对象<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span>  $$ = ajQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ajQuery.fn.init(selector);</div><div class=\"line\"> &#125;</div><div class=\"line\"> ajQuery.fn = ajQuery.prototype = &#123;</div><div class=\"line\">   <span class=\"attr\">name</span>: <span class=\"string\">\"aaron\"</span>,</div><div class=\"line\">   <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">this</span>.selector = selector;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">     &#125;,</div><div class=\"line\">   <span class=\"attr\">constructor</span>: ajQuery</div><div class=\"line\"> &#125;</div><div class=\"line\">  ajQuery.fn.init.prototype = ajQuery.fn;</div><div class=\"line\">  ajQuery.extend = ajQuery.fn.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> options, src, copy, target = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]||&#123;&#125;,i = <span class=\"number\">1</span>, length = <span class=\"built_in\">arguments</span>.length;</div><div class=\"line\">    <span class=\"comment\">//只有一个参数，就是对jQuery自身的扩展处理</span></div><div class=\"line\">    <span class=\"comment\">//extend,fn.extend</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(i === length)&#123;</div><div class=\"line\">      target = <span class=\"keyword\">this</span>; <span class=\"comment\">//调用的上下文对象jQuery/或者实例</span></div><div class=\"line\">      i--;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(;i &lt; length; i++)&#123;</div><div class=\"line\">      <span class=\"comment\">//从i开始取参数，不为空开始遍历</span></div><div class=\"line\">      <span class=\"keyword\">if</span>((options = <span class=\"built_in\">arguments</span>[i])!=<span class=\"literal\">null</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(name <span class=\"keyword\">in</span> options)&#123;</div><div class=\"line\">          copy = options[name];</div><div class=\"line\">          <span class=\"comment\">//覆盖拷贝</span></div><div class=\"line\">          target[name] = copy;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> target;</div><div class=\"line\">  &#125;</div><div class=\"line\">  ajQuery.fn.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">setName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">myName</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.myName = myName;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#aaron\"</span>).innerHTML = <span class=\"keyword\">this</span>.myName;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">$$().setName(<span class=\"string\">\"张辉是个大傻逼\"</span>).getName();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"11-回溯处理的设计\"><a href=\"#11-回溯处理的设计\" class=\"headerlink\" title=\"11. 回溯处理的设计\"></a>11. 回溯处理的设计</h1><h2 id=\"1-关于jQuery对象的包装\"><a href=\"#1-关于jQuery对象的包装\" class=\"headerlink\" title=\"1. 关于jQuery对象的包装\"></a>1. 关于jQuery对象的包装</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $test = $(<span class=\"string\">'test'</span>);</div></pre></td></tr></table></figure>\n<p>返回jQuery对象<br><img src=\"/images/prevObject.jpg\" alt=\"img\">  </p>\n<blockquote>\n<p>jQuery内部维护着一个jQuery对象栈， 每个遍历方法都会找到一组新元素（一个jQuery对象），然后jQuery会把这组元素推入到栈中。<br>而每个jQuery对象都有三个属性： context、selector和prevObject, 其中的prevObject属性就指向这个对象栈中的前一个对象，通过这个属性可以回溯到最初的DOM元素集中。  </p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">  &lt;ul id=\"test\"&gt;</div><div class=\"line\">    parent</div><div class=\"line\">    &lt;li&gt;child&lt;/li&gt;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\"> //分开</div><div class=\"line\"> var aa = $('#test);</div><div class=\"line\"> test.find('li').click(function()&#123;</div><div class=\"line\">   alert(1); //1</div><div class=\"line\"> &#125;)</div><div class=\"line\"> test.click(function()&#123;</div><div class=\"line\">   alert(2)</div><div class=\"line\"> &#125;)</div><div class=\"line\">//链式</div><div class=\"line\">test.find('li').click(function()&#123;</div><div class=\"line\">  alert(1);</div><div class=\"line\">&#125;).end().click(function()&#123;</div><div class=\"line\">  alert(2);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>jQuery为我们操作内部对象栈提供了非常有用的2个方法</p>\n<ul>\n<li>.end()<br>回到前一个jQuery对象</li>\n<li>.addBack()<br>调用它会在栈中回溯一个位置，然后把两个位置上的元素组合起来，并把这个新的组合之后的元素集推入栈的上方  </li>\n</ul>\n<p>利用这个DOM元素栈可以减少重复的查询和遍历的操作</p>\n<h1 id=\"11-end与addBack\"><a href=\"#11-end与addBack\" class=\"headerlink\" title=\"11. end与addBack\"></a>11. end与addBack</h1><h2 id=\"源码实现\"><a href=\"#源码实现\" class=\"headerlink\" title=\"\b源码实现\"></a>\b源码实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">end: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.prevObject || <span class=\"keyword\">this</span>.constructor(<span class=\"literal\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">jQuery.fn.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">find</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">        jQuery.find(selector, self[i], ret);</div><div class=\"line\">        <span class=\"comment\">//Needed because $(selector,context)becomes $(context).find(selector)</span></div><div class=\"line\">        ret = <span class=\"keyword\">this</span>.pushStack(len &gt; <span class=\"number\">1</span>? jQuery.unique(ret):ret);</div><div class=\"line\">        ret.selector = <span class=\"keyword\">this</span>.selector?<span class=\"keyword\">this</span>.selector + <span class=\"string\">\" \"</span> + selector: selector;</div><div class=\"line\">        <span class=\"keyword\">return</span> ret;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>流程解析   </p>\n<ol>\n<li>首先构建一个新的jQuery对象，因为constructor是指向构造器的，所以这里就等同于调用jQuery()方法了，返回了一个新的jQuery对象   </li>\n<li>然后用jQuery.merge语句把elems节点合并到新的jQuery对象   </li>\n<li>最后给返回的新jQuery对象添加prevObject属性</li>\n</ol>\n</blockquote>\n<h1 id=\"12-仿栈与队列的操作\"><a href=\"#12-仿栈与队列的操作\" class=\"headerlink\" title=\"12. 仿栈与队列的操作\"></a>12. 仿栈与队列的操作</h1><h2 id=\"1-get方法\"><a href=\"#1-get方法\" class=\"headerlink\" title=\"1. get方法\"></a>1. get方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> num != <span class=\"literal\">null</span>?<span class=\"comment\">//Return just the one element from the set</span></div><div class=\"line\">  (num &lt; <span class=\"number\">0</span> ? <span class=\"keyword\">this</span>[num + <span class=\"keyword\">this</span>.length]):<span class=\"keyword\">this</span>[num]<span class=\"comment\">//Return all the elements in a clean array</span></div><div class=\"line\">  slice.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"1-jQuery整体架构\"><a href=\"#1-jQuery整体架构\" class=\"headerlink\" title=\"1. jQuery整体架构\"></a>1. jQuery整体架构</h1><p><img src=\"http://www.ceerqingting.com/2017/06/04/learnJquery/jquery.jpg\" alt=\"img\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//函数自执行</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">global, factory</span>) </span>&#123;</div><div class=\"line\">   factory(global);</div><div class=\"line\">      &#125;(<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">\"undefined\"</span> ? <span class=\"built_in\">window</span> : <span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window, noGlobal</span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> selector, context </span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> jQuery.fn.init( selector, context );</div><div class=\"line\">        &#125;;</div><div class=\"line\">        jQuery.fn = jQuery.prototype = &#123;&#125;;</div><div class=\"line\">        <span class=\"comment\">// 核心方法</span></div><div class=\"line\">        <span class=\"comment\">// 回调系统</span></div><div class=\"line\">        <span class=\"comment\">// 异步队列</span></div><div class=\"line\">        <span class=\"comment\">// 数据缓存</span></div><div class=\"line\">        <span class=\"comment\">// 队列操作</span></div><div class=\"line\">        <span class=\"comment\">// 选择器引</span></div><div class=\"line\">        <span class=\"comment\">// 属性操作</span></div><div class=\"line\">        <span class=\"comment\">// 节点遍历</span></div><div class=\"line\">        <span class=\"comment\">// 文档处理</span></div><div class=\"line\">        <span class=\"comment\">// 样式操作</span></div><div class=\"line\">        <span class=\"comment\">// 属性操作</span></div><div class=\"line\">        <span class=\"comment\">// 事件体系</span></div><div class=\"line\">        <span class=\"comment\">// AJAX交互</span></div><div class=\"line\">        <span class=\"comment\">// 动画引擎</span></div><div class=\"line\">        <span class=\"keyword\">return</span> jQuery;</div><div class=\"line\"> &#125;));</div></pre></td></tr></table></figure></p>\n<h2 id=\"1-五大块\"><a href=\"#1-五大块\" class=\"headerlink\" title=\"1. 五大块\"></a>1. 五大块</h2><ul>\n<li>选择器</li>\n<li>DOM操作</li>\n<li>事件</li>\n<li>AJAX</li>\n<li>动画</li>\n</ul>\n<h2 id=\"2-示例\"><a href=\"#2-示例\" class=\"headerlink\" title=\"2. 示例\"></a>2. 示例</h2><ul>\n<li><p>接口：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.ajaxComplete()</div><div class=\"line\">.ajaxError()</div><div class=\"line\">.ajaxSend()</div><div class=\"line\">.ajaxStart()</div><div class=\"line\">.ajaxStop()</div><div class=\"line\">.ajaxSuccess()</div></pre></td></tr></table></figure>\n</li>\n<li><p>底层接口：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.ajax()</div><div class=\"line\">jQuery.ajaxSetup()</div></pre></td></tr></table></figure>\n</li>\n<li><p>快捷方法：<br></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.get()</div><div class=\"line\">jQuery.getJSON()</div><div class=\"line\">jQuery.getScript()</div><div class=\"line\">jQuery.post()</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3-jQuery接口设计原理\"><a href=\"#3-jQuery接口设计原理\" class=\"headerlink\" title=\"3. jQuery接口设计原理\"></a>3. jQuery接口设计原理</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.each([<span class=\"string\">\"get\"</span>, <span class=\"string\">\"post\"</span>]), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, method</span>)</span>&#123;</div><div class=\"line\">  jQuery[ method ] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> url, data, callback, type</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//Shift arguments if data argument was omitted</span></div><div class=\"line\">    <span class=\"keyword\">if</span>( jQuery.isFunction( data ))&#123;</div><div class=\"line\">      type = type || callback;</div><div class=\"line\">      callback = dta;</div><div class=\"line\">      data = <span class=\"literal\">undefined</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> jQuery.ajax(&#123;</div><div class=\"line\">      <span class=\"attr\">url</span>: url,</div><div class=\"line\">      <span class=\"attr\">type</span>: method,</div><div class=\"line\">      <span class=\"attr\">data</span>: data,</div><div class=\"line\">      <span class=\"attr\">success</span>: callback</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"2-立即调用表达式\"><a href=\"#2-立即调用表达式\" class=\"headerlink\" title=\"2. 立即调用表达式\"></a>2. 立即调用表达式</h1><blockquote>\n<p>\b解决命名空间与变量污染的问题<br>参考：<a href=\"http://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html\">立即调用的函数表达式</a>  </p>\n</blockquote>\n<h2 id=\"1-写法\"><a href=\"#1-写法\" class=\"headerlink\" title=\"1. 写法\"></a>1. 写法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//写法一：</span></div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window, factory</span>)</span>&#123;</div><div class=\"line\">    factory(<span class=\"built_in\">window</span>)</div><div class=\"line\">  &#125;(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//jQuery的调用</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;))</div><div class=\"line\"><span class=\"comment\">//写法二：</span></div><div class=\"line\">  <span class=\"keyword\">var</span> factory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//执行方法</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">var</span> jQuery = factory();</div><div class=\"line\"><span class=\"comment\">//写法三：</span></div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window, undefined</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">    <span class=\"comment\">//....</span></div><div class=\"line\">    <span class=\"built_in\">window</span>.jQuery = <span class=\"built_in\">window</span>.$ = jQuery;</div><div class=\"line\">  &#125;)(<span class=\"built_in\">window</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"2-写法优势\"><a href=\"#2-写法优势\" class=\"headerlink\" title=\"2. 写法优势\"></a>2. 写法优势</h2><ul>\n<li><p>window和undefined都是为了减少变量查找所经过的scope作用域。当window通过传递给闭包内部之后，在闭包内部使用它的时候，可以把它当成一个局部变量，显然比原先在window scope下查找的时候要快一些。</p>\n</li>\n<li><p>undefined也是同样道理，其实这个undefined并不是JavaScript数据类型的undefined，而是\b一个普普通通的变量名。只是因为没给它传递值，他的值就是undefined, undefined并不是JavaScript的保留字。  </p>\n</li>\n</ul>\n<h2 id=\"3-为什么要传递undefined\"><a href=\"#3-为什么要传递undefined\" class=\"headerlink\" title=\"3. 为什么要传递undefined\"></a>3. 为什么要传递undefined</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Applications Javscript中的undefined并不是作为关键字 因此可以允许用户对其赋值  </span></div><div class=\"line\"> <span class=\"keyword\">var</span> <span class=\"literal\">undefined</span> = <span class=\"string\">\"a\"</span>;</div><div class=\"line\"> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window</span>)</span>&#123;</div><div class=\"line\">   alert(<span class=\"literal\">undefined</span>); <span class=\"comment\">//IE8 \"a\"</span></div><div class=\"line\"> &#125;)(<span class=\"built_in\">window</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"4-为什么要创建一个外层包裹\"><a href=\"#4-为什么要创建一个外层包裹\" class=\"headerlink\" title=\"4. 为什么要创建一个外层包裹\"></a>4. 为什么要创建一个外层包裹</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"number\">1</span>、匿名函数与自执行</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//代码逻辑</span></div><div class=\"line\">    &#125;</div><div class=\"line\">   <span class=\"comment\">//上面这种写法是错了，声明了它但是又不给名字又没有使用，所以在语法上错误的，那么怎么去执行一个匿名的函数呢？</span></div><div class=\"line\">   <span class=\"comment\">//要调用一个函数，我们必须要有方法定位它、引用它。所以，我们要取一个名字：</span></div><div class=\"line\">   <span class=\"keyword\">var</span> jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"comment\">//代码逻辑</span></div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"comment\">//jQuery使用()将匿名函数括起来，然后后面再加一对小括号（包含参数列表），那么这小括号能把我们的表达式组合分块，并且每一块（也就是每一对小括号），都有一个返回值。这个返回值实际上也就是小括号中表达式的返回值。所以，当我们用一对小括号把匿名函数括起来的时候，实际上小括号返回的，就是一个匿名函数的Function对象。因此，小括号对加上匿名函数就如同有名字的函数般被我们取得它的引用位置了。所以如果在这个引用变量后面再加上参数列表，就会实现普通函数的调用形式。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2</span>、jQuery在不同平台的下的加载逻辑</div><div class=\"line\"> <span class=\"comment\">// AMD 和 CommonJS 的支持代码</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span>.export === <span class=\"string\">\"object\"</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">module</span>.exports = global.document ? factory(global, <span class=\"literal\">true</span>): <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(!w.document)&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"jQuery requires a window with a document\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> factory(w);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    factory(global);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><blockquote>\n<p>全局变量是魔鬼, 匿名函数可以有效的保证在页面上写入JavaScript，而不会造成全局变量的污染，通过小括号，让其加载的时候立即初始化，这样就形成了一个单例模式的效果从而只会执行一次。</p>\n</blockquote>\n<h1 id=\"3-jQuery的类数组对象结构\"><a href=\"#3-jQuery的类数组对象结构\" class=\"headerlink\" title=\"3. jQuery的类数组对象结构\"></a>3. jQuery的类数组对象结构</h1><h2 id=\"1-为什么是类数组对象呢？\"><a href=\"#1-为什么是类数组对象呢？\" class=\"headerlink\" title=\"1. 为什么是类数组对象呢？\"></a>1. 为什么是类数组对象呢？</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//9种方法重载</span></div><div class=\"line\">  <span class=\"number\">1.</span>jQuery([selector, [context]])</div><div class=\"line\">  <span class=\"number\">2.</span>jQuery(element)</div><div class=\"line\">  <span class=\"number\">3.</span>jQuery(elementArray)</div><div class=\"line\">  <span class=\"number\">4.</span>jQUery(object)</div><div class=\"line\">  <span class=\"number\">5.</span>jQuery(jQuery object)</div><div class=\"line\">  <span class=\"number\">6.</span>jQuery(html, [ownerDocument])</div><div class=\"line\">  <span class=\"number\">7.</span>jQuery(html, [attributes])</div><div class=\"line\">  <span class=\"number\">8.</span>jQuery()</div><div class=\"line\">  <span class=\"number\">9.</span>jQuery(callback)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>9种方法整体可以分三大块： 选择器、dom的处理、dom加载<br>换句话说jQuery就是为了获取DOM、操作DOM而存在的，所以为了更方便这些操作，让节点\b与实例对象通过一个桥梁给关联起来，jQuery内部就采用了一种叫“类数组对象”的方法作为存储接口，所以我们既可以像对象一样处理jQuery操作，也能像数组一样可以使用push、pop、shift、unshift、sort、each、map等类数组的方法操作jQuery对象了  </p>\n</blockquote>\n<h2 id=\"2-jQuery对象可用数组下标索引是什么原理\"><a href=\"#2-jQuery对象可用数组下标索引是什么原理\" class=\"headerlink\" title=\"2. jQuery对象可用数组下标索引是什么原理?\"></a>2. jQuery对象可用数组下标索引是什么原理?</h2><p>\b通过$(“.Class”)构建的对象结构如下：<br><img src=\"/images/selector.jpg\" alt=\"img\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> aQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> aQuery))&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> aQuery(selector);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> elem = <span class=\"built_in\">document</span>.getElementById(<span class=\"regexp\">/[^#].*/</span>.exec(selector)[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"keyword\">this</span>.length = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>[<span class=\"number\">0</span>] = elem;</div><div class=\"line\">    <span class=\"keyword\">this</span>.context = <span class=\"built_in\">document</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.selector = selector;</div><div class=\"line\">    <span class=\"keyword\">this</span>.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[num];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>通过对象键值对的关系保存属性， 原型保存方法, 以上为模拟jQuery的对象结构  </p>\n</blockquote>\n<h2 id=\"3-jQuery的无new构建原理\"><a href=\"#3-jQuery的无new构建原理\" class=\"headerlink\" title=\"3. jQuery的无new构建原理\"></a>3. jQuery的无new构建原理</h2><blockquote>\n<p>函数aQuery()内部首先保证了必须是通过new操作符构建。这样就能保证当前构建的是一个带有this的实例对象，既然是对象我们可以把所有的属性与方法作为对象的key与value的方式给映射到this上，所以如上结构就可以模拟出jQuery这样的操作了，即可通过索引取值，页也可以链式方法取值，但是缺陷是每次调用ajQuery方法等于是创建了一个新的实例，那么类似get方法就要在每一个实例上重新创建一遍，性能大打折扣，所以jQuery在结构上的优化不仅仅只是我们看到的，除了实现类数组结构、方法的原型共享，而且还实现方法的静态与实例的共存</p>\n</blockquote>\n<h1 id=\"4-jQuery中的ready与load事件\"><a href=\"#4-jQuery中的ready与load事件\" class=\"headerlink\" title=\"4. jQuery中的ready与load事件\"></a>4. jQuery中的ready与load事件</h1><h2 id=\"1-jQuery3种针对文档加载的方法\"><a href=\"#1-jQuery3种针对文档加载的方法\" class=\"headerlink\" title=\"1. jQuery3种针对文档加载\b的方法\"></a>1. jQuery3种针对文档加载\b的方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//...代码...</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//document ready简写</span></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"comment\">//...代码...</span></div><div class=\"line\">&#125;)</div><div class=\"line\">$(<span class=\"built_in\">document</span>).load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"comment\">//...代码...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"2-ready和load区别\"><a href=\"#2-ready和load区别\" class=\"headerlink\" title=\"2. ready和load区别\"></a>2. ready和load区别</h2><blockquote>\n<p>DOM文档加载步骤</p>\n<ol>\n<li>解析HTML结构</li>\n<li>加载外部脚本和样式表文件</li>\n<li>解析并执行脚本代码</li>\n<li>构造HTML DOM模型。//ready</li>\n<li>加载图片等外部文件</li>\n<li>页面加载完毕 //load<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//jQuery处理文档加载时机</span></div><div class=\"line\">jQuery.ready.promise = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!readyList)&#123;</div><div class=\"line\">    readyList = jQuery.Deferred();</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.readyState === <span class=\"string\">'complete'</span>)&#123;</div><div class=\"line\">      <span class=\"comment\">//Handle it asynchronously to allow scripts the opportunity to delay ready</span></div><div class=\"line\">      setTimeot(jQuery.ready);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>,completed, <span class=\"literal\">false</span>);</div><div class=\"line\">      <span class=\"built_in\">window</span>.addEventListner(<span class=\"string\">\"load\"</span>, completed, <span class=\"literal\">false</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> readyList.promise(obj);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<h1 id=\"5-jQuery多库共存处理\"><a href=\"#5-jQuery多库共存处理\" class=\"headerlink\" title=\"5. jQuery多库共存处理\"></a>5. jQuery多库共存处理</h1><h2 id=\"1-使用DEMO\"><a href=\"#1-使用DEMO\" class=\"headerlink\" title=\"1. 使用DEMO\"></a>1. 使用DEMO</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.noConflict();</div><div class=\"line\"><span class=\"comment\">//使用jQuery</span></div><div class=\"line\">jQuery(<span class=\"string\">\"aaron\"</span>).show();</div><div class=\"line\"><span class=\"comment\">//使用其他库的$()</span></div><div class=\"line\">$(<span class=\"string\">\"aa\"</span>).style.display = <span class=\"string\">\"block\"</span>;</div><div class=\"line\"><span class=\"comment\">//这个函数必须在导入jQuery文件之后，并且在导入另一个导致冲突的库之前使用</span></div></pre></td></tr></table></figure>\n<h2 id=\"2-原理\"><a href=\"#2-原理\" class=\"headerlink\" title=\"2. 原理\"></a>2. 原理</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _jQuery = <span class=\"built_in\">window</span>.jQuery, _$ = <span class=\"built_in\">window</span>.$;</div><div class=\"line\">jQuery.noConflict = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">deep</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.$ === jQuery)&#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.$ = _$;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span>(deep &amp;&amp; <span class=\"built_in\">window</span>.jQuery === jQuery)&#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.jQuery = _jQuery;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> jQuery;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"6-对象的构建\"><a href=\"#6-对象的构建\" class=\"headerlink\" title=\"6. 对象的构建\"></a>6. 对象的构建</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//类一</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajQuery</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'jQuery'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> ajQuery();</div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> ajQuery();</div><div class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> ajQuery();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//类二</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajQuery</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.name = <span class=\"string\">'jQuery'</span>;</div><div class=\"line\"> &#125;  </div><div class=\"line\"> ajQuery.prototype = &#123;</div><div class=\"line\">   <span class=\"attr\">sayName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">var</span> a  = <span class=\"keyword\">new</span> ajQuery();</div><div class=\"line\"> <span class=\"keyword\">var</span> b  = <span class=\"keyword\">new</span> ajQuery();</div><div class=\"line\"> <span class=\"keyword\">var</span> c  = <span class=\"keyword\">new</span> ajQuery();</div></pre></td></tr></table></figure>\n<p>类一与类二产生的结构几乎是一样的，本质区别是：<br>类二new产生的a、b、c三个实例对象共享了原型的sayName方法，节省了内存空间，类一则是要为每一个实例复制sayName方法，每个\b方法属性都占用一定空间，类二则是要通过scope连接到原型链查找，无形之中要多一层作用域的查找<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//jQUery对象的构建</span></div><div class=\"line\">jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector, context</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> jQuery.fn.init(selector, context);</div><div class=\"line\">&#125;</div><div class=\"line\">jQuery.fn = jQuery.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">jquery</span>: version,</div><div class=\"line\">  <span class=\"attr\">constructor</span>: jQuery,</div><div class=\"line\">  ....</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = $();</div></pre></td></tr></table></figure></p>\n<p>ajQuery与jQuery结构不同点：</p>\n<ol>\n<li>没有采用new操作符</li>\n<li>return返回的是一个通过new出来的对象</li>\n</ol>\n<h1 id=\"7-分离构造器\"><a href=\"#7-分离构造器\" class=\"headerlink\" title=\"7. 分离构造器\"></a>7. 分离构造器</h1><h2 id=\"1-通过new操作符构建一个对象：\"><a href=\"#1-通过new操作符构建一个对象：\" class=\"headerlink\" title=\"1. 通过new操作符构建一个对象：\"></a>1. 通过new操作符构建一个对象：</h2><ul>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域赋给新对象（所以this就指向了这个新对象）</li>\n<li>执行构造函数中的代码</li>\n<li>返回这个新对象  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//常见类式写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> $$ = ajQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.selector = selector;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">ajQuery.fn = ajQuery.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">selectorName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.selector;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">construction</span>: ajQuery</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> $$(<span class=\"string\">'aaa'</span>);</div><div class=\"line\">a.selectorName();<span class=\"comment\">//aaa</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>改造jQuery无new格式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $$ = ajQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> ajQuery))&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ajQuery(selector);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">this</span>.selector = selector;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>错误写法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $$ = ajQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selecotr</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.selector = selector;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ajQuery(selector);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Uncaught RangeError: Maximum call stact size exceeded</span></div></pre></td></tr></table></figure></p>\n<p>jQuery为了避免出现这种死循环，采取的方法为把原型上的一个init方法作为构造器<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $$ = ajQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//把原型上的init作为构造器</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ajQuery.fn.init(selector);</div><div class=\"line\">&#125;</div><div class=\"line\">ajQuery.fn = ajQuery.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'aaron'</span>,</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">constructor</span>: ajQuery</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>问题：init是ajQuery原型上作为构造器的一个方法，那么this就不是ajQuery了，所以this就完全引用不到ajQuery的原型了，这里通过new把init方法与ajQuery给分离成2个独立的构造器</p>\n<h1 id=\"8-静态与实例方法共享设计\"><a href=\"#8-静态与实例方法共享设计\" class=\"headerlink\" title=\"8. 静态与实例方法共享设计\"></a>8. 静态与实例方法共享设计</h1><h2 id=\"1-遍历方法\"><a href=\"#1-遍历方法\" class=\"headerlink\" title=\"1. 遍历方法\"></a>1. 遍历方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'.aaron'</span>).each() <span class=\"comment\">//作为实例方法存在</span></div><div class=\"line\">$.each() <span class=\"comment\">//作为静态方法存在</span></div></pre></td></tr></table></figure>\n<p>第一条语句是给有指定的上下文调用的，就是$(‘.aaron’)获取的DOM合集，第二条语句$.each()函数可用于迭代任何集合，无论是“名/值”对象或者数组。在迭代数组的情况下，回调函数每次都会传递一个数组索引和相应的数组值作为参数，那是不是要写两个方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//jQuery源码</span></div><div class=\"line\">jQuery.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">each</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, args</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> jQuery.each(<span class=\"keyword\">this</span>, callback, args);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-共享方法\"><a href=\"#2-共享方法\" class=\"headerlink\" title=\"2. 共享方法\"></a>2. 共享方法</h2><blockquote>\n<p>jQuery通过new原型prototype上的init方法当做构造器，那么init的原型链方法就是实例的方法，所以jQuery通过2个构造器划分2种不同的调用方式，一种是静态，一种是原型，方法是共享的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//jQuery方案</span></div><div class=\"line\">  ajQuery.fn = ajQuery.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'aaron'</span>,</div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.selector = selector;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">constructor</span>: ajQuery</div><div class=\"line\">  &#125;</div><div class=\"line\">  ajQuery.fn.init.prototype = ajQuery.fn;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p><img src=\"/images/init.jpg\" alt=\"img\"><br>通过原型传递解决问题，把jQuery的原型传递给jQuery.prototype.init.prototype,因为是引用传递所以不需要担心循环引用性能的问题</p>\n<h1 id=\"9-方法链式调用的实现\"><a href=\"#9-方法链式调用的实现\" class=\"headerlink\" title=\"9. 方法链式调用的实现\"></a>9. 方法链式调用的实现</h1><h2 id=\"1-DSL\"><a href=\"#1-DSL\" class=\"headerlink\" title=\"1. DSL\"></a>1. DSL</h2><blockquote>\n<p>Domain Specific Language: 用于描述和解决特定领域问题的语言<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> $(<span class=\"string\">'input[type=\"button\"]'</span>).eq(<span class=\"number\">0</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'点击我！'</span>)</div><div class=\"line\">&#125;).end().eq(<span class=\"number\">1</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'input[type=\"button\"]:eq(0)'</span>).trigger(<span class=\"string\">'click'</span>);</div><div class=\"line\">&#125;).end().eq(<span class=\"number\">2</span>).toggle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'toggle'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>这种管道风格的DSL链式代码：</p>\n<ul>\n<li>节约JS代码</li>\n<li>所返回的都是同一个对象，提高代码效率<h2 id=\"2-return-this\"><a href=\"#2-return-this\" class=\"headerlink\" title=\"2. return this\"></a>2. return this</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $$ = ajQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ajQuery.fn.init(selector);</div><div class=\"line\"> &#125;</div><div class=\"line\"> ajQuery.fn = ajQuery.prototype = &#123;</div><div class=\"line\">   <span class=\"attr\">name</span>: <span class=\"string\">'aaron'</span>,</div><div class=\"line\">   <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">this</span>.selector = selector;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">   &#125;,</div><div class=\"line\">   <span class=\"attr\">constructor</span>: ajQuery</div><div class=\"line\"> &#125;</div><div class=\"line\"> ajQuery.fn.init.prototype = ajQuery.fn;</div><div class=\"line\"> ajQuery.fn.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">myName</span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.myName = myName;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> ajQuery.fn.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   $(<span class=\"string\">'#aaron'</span>).html(<span class=\"keyword\">this</span>.myName);</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> $$().setName(<span class=\"string\">'jiangfen'</span>).getName();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果需要链式处理，只需要在方法内部返回当前这个实例对象的this就可以了，因为返回当前实例的this,从而可以访问自己的原型。这样处理只是\b同步链式，除了同步链式还有异步链式。</p>\n<h1 id=\"10-插件接口的设计\"><a href=\"#10-插件接口的设计\" class=\"headerlink\" title=\"10. 插件接口的设计\"></a>10. 插件接口的设计</h1><h2 id=\"1-jQuery插件开发分为两种\"><a href=\"#1-jQuery插件开发分为两种\" class=\"headerlink\" title=\"1. jQuery插件开发分为两种\"></a>1. jQuery插件开发分为两种</h2><ul>\n<li>挂在jQuery命名空间下的全局函数，也可称为静态方法</li>\n<li>挂在jQuery原型下的方法，这样通过选择器的jQuery对象实例也能共享该方法。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//提供的接口</span></div><div class=\"line\">$.extend(target, [object1], [objectN])</div><div class=\"line\"><span class=\"comment\">//接口的使用： </span></div><div class=\"line\">jQuery.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">removeData</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">jQuery.fn.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">removeData</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"2-jQuery实现方法\"><a href=\"#2-jQuery实现方法\" class=\"headerlink\" title=\"2. jQuery实现方法\"></a>2. jQuery实现方法</h2><ul>\n<li>jQuery支持自己扩展属性，jQuery.extend和jQuery.fn.extend其实是同指向同一方法的不同引用</li>\n<li>\bjQuery.extend调用的\b时候上下文指向的是jQuery构造器</li>\n<li>jQuery.fn.extend调用的时候上下文指向的是jQuery构造器的实例对象<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span>  $$ = ajQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ajQuery.fn.init(selector);</div><div class=\"line\"> &#125;</div><div class=\"line\"> ajQuery.fn = ajQuery.prototype = &#123;</div><div class=\"line\">   <span class=\"attr\">name</span>: <span class=\"string\">\"aaron\"</span>,</div><div class=\"line\">   <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">this</span>.selector = selector;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">     &#125;,</div><div class=\"line\">   <span class=\"attr\">constructor</span>: ajQuery</div><div class=\"line\"> &#125;</div><div class=\"line\">  ajQuery.fn.init.prototype = ajQuery.fn;</div><div class=\"line\">  ajQuery.extend = ajQuery.fn.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> options, src, copy, target = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]||&#123;&#125;,i = <span class=\"number\">1</span>, length = <span class=\"built_in\">arguments</span>.length;</div><div class=\"line\">    <span class=\"comment\">//只有一个参数，就是对jQuery自身的扩展处理</span></div><div class=\"line\">    <span class=\"comment\">//extend,fn.extend</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(i === length)&#123;</div><div class=\"line\">      target = <span class=\"keyword\">this</span>; <span class=\"comment\">//调用的上下文对象jQuery/或者实例</span></div><div class=\"line\">      i--;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(;i &lt; length; i++)&#123;</div><div class=\"line\">      <span class=\"comment\">//从i开始取参数，不为空开始遍历</span></div><div class=\"line\">      <span class=\"keyword\">if</span>((options = <span class=\"built_in\">arguments</span>[i])!=<span class=\"literal\">null</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(name <span class=\"keyword\">in</span> options)&#123;</div><div class=\"line\">          copy = options[name];</div><div class=\"line\">          <span class=\"comment\">//覆盖拷贝</span></div><div class=\"line\">          target[name] = copy;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> target;</div><div class=\"line\">  &#125;</div><div class=\"line\">  ajQuery.fn.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">setName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">myName</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.myName = myName;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#aaron\"</span>).innerHTML = <span class=\"keyword\">this</span>.myName;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">$$().setName(<span class=\"string\">\"张辉是个大傻逼\"</span>).getName();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"11-回溯处理的设计\"><a href=\"#11-回溯处理的设计\" class=\"headerlink\" title=\"11. 回溯处理的设计\"></a>11. 回溯处理的设计</h1><h2 id=\"1-关于jQuery对象的包装\"><a href=\"#1-关于jQuery对象的包装\" class=\"headerlink\" title=\"1. 关于jQuery对象的包装\"></a>1. 关于jQuery对象的包装</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $test = $(<span class=\"string\">'test'</span>);</div></pre></td></tr></table></figure>\n<p>返回jQuery对象<br><img src=\"/images/prevObject.jpg\" alt=\"img\">  </p>\n<blockquote>\n<p>jQuery内部维护着一个jQuery对象栈， 每个遍历方法都会找到一组新元素（一个jQuery对象），然后jQuery会把这组元素推入到栈中。<br>而每个jQuery对象都有三个属性： context、selector和prevObject, 其中的prevObject属性就指向这个对象栈中的前一个对象，通过这个属性可以回溯到最初的DOM元素集中。  </p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">  &lt;ul id=\"test\"&gt;</div><div class=\"line\">    parent</div><div class=\"line\">    &lt;li&gt;child&lt;/li&gt;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\"> //分开</div><div class=\"line\"> var aa = $('#test);</div><div class=\"line\"> test.find('li').click(function()&#123;</div><div class=\"line\">   alert(1); //1</div><div class=\"line\"> &#125;)</div><div class=\"line\"> test.click(function()&#123;</div><div class=\"line\">   alert(2)</div><div class=\"line\"> &#125;)</div><div class=\"line\">//链式</div><div class=\"line\">test.find('li').click(function()&#123;</div><div class=\"line\">  alert(1);</div><div class=\"line\">&#125;).end().click(function()&#123;</div><div class=\"line\">  alert(2);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>jQuery为我们操作内部对象栈提供了非常有用的2个方法</p>\n<ul>\n<li>.end()<br>回到前一个jQuery对象</li>\n<li>.addBack()<br>调用它会在栈中回溯一个位置，然后把两个位置上的元素组合起来，并把这个新的组合之后的元素集推入栈的上方  </li>\n</ul>\n<p>利用这个DOM元素栈可以减少重复的查询和遍历的操作</p>\n<h1 id=\"11-end与addBack\"><a href=\"#11-end与addBack\" class=\"headerlink\" title=\"11. end与addBack\"></a>11. end与addBack</h1><h2 id=\"源码实现\"><a href=\"#源码实现\" class=\"headerlink\" title=\"\b源码实现\"></a>\b源码实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">end: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.prevObject || <span class=\"keyword\">this</span>.constructor(<span class=\"literal\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">jQuery.fn.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">find</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</div><div class=\"line\">        jQuery.find(selector, self[i], ret);</div><div class=\"line\">        <span class=\"comment\">//Needed because $(selector,context)becomes $(context).find(selector)</span></div><div class=\"line\">        ret = <span class=\"keyword\">this</span>.pushStack(len &gt; <span class=\"number\">1</span>? jQuery.unique(ret):ret);</div><div class=\"line\">        ret.selector = <span class=\"keyword\">this</span>.selector?<span class=\"keyword\">this</span>.selector + <span class=\"string\">\" \"</span> + selector: selector;</div><div class=\"line\">        <span class=\"keyword\">return</span> ret;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>流程解析   </p>\n<ol>\n<li>首先构建一个新的jQuery对象，因为constructor是指向构造器的，所以这里就等同于调用jQuery()方法了，返回了一个新的jQuery对象   </li>\n<li>然后用jQuery.merge语句把elems节点合并到新的jQuery对象   </li>\n<li>最后给返回的新jQuery对象添加prevObject属性</li>\n</ol>\n</blockquote>\n<h1 id=\"12-仿栈与队列的操作\"><a href=\"#12-仿栈与队列的操作\" class=\"headerlink\" title=\"12. 仿栈与队列的操作\"></a>12. 仿栈与队列的操作</h1><h2 id=\"1-get方法\"><a href=\"#1-get方法\" class=\"headerlink\" title=\"1. get方法\"></a>1. get方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> num != <span class=\"literal\">null</span>?<span class=\"comment\">//Return just the one element from the set</span></div><div class=\"line\">  (num &lt; <span class=\"number\">0</span> ? <span class=\"keyword\">this</span>[num + <span class=\"keyword\">this</span>.length]):<span class=\"keyword\">this</span>[num]<span class=\"comment\">//Return all the elements in a clean array</span></div><div class=\"line\">  slice.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/learnJquery/jquery.jpg","slug":"jquery.jpg","post":"cj9pgkqf00004dz37x86pmu46","modified":0,"renderable":0},{"_id":"source/_posts/animation/cheap-operations.jpg","slug":"cheap-operations.jpg","post":"cj9pgkqeo0000dz37xwxzso0q","modified":0,"renderable":0},{"_id":"source/_posts/animation/devtools-waterfall.jpg","slug":"devtools-waterfall.jpg","post":"cj9pgkqeo0000dz37xwxzso0q","modified":0,"renderable":0},{"_id":"source/_posts/animation/layout.jpg","slug":"layout.jpg","post":"cj9pgkqeo0000dz37xwxzso0q","modified":0,"renderable":0},{"_id":"source/_posts/animation/paint.jpg","slug":"paint.jpg","post":"cj9pgkqeo0000dz37xwxzso0q","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}